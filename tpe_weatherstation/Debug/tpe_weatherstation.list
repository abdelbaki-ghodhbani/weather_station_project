
tpe_weatherstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038ac  080038ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080038ac  080038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038b4  080038b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  0800392c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  0800392c  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faf2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ac  00000000  00000000  0002fb92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00031d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a88  00000000  00000000  000335b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea40  00000000  00000000  0004a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008db78  00000000  00000000  00058a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e65f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003870  00000000  00000000  000e664c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003720 	.word	0x08003720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003720 	.word	0x08003720

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <bufclr>:
#include "stdio.h"
#include "string.h"


void bufclr (char *buf)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff fe25 	bl	80001e0 <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	e007      	b.n	80005b0 <bufclr+0x28>
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3301      	adds	r3, #1
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf3      	blt.n	80005a0 <bufclr+0x18>
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <ESP_Init>:


void ESP_Init (char *SSID, char *PASSWD)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005ce:	f000 f91f 	bl	8000810 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 80005d2:	4823      	ldr	r0, [pc, #140]	; (8000660 <ESP_Init+0x9c>)
 80005d4:	f000 f9e8 	bl	80009a8 <Uart_sendstring>
	HAL_Delay(1000);
 80005d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005dc:	f001 f81e 	bl	800161c <HAL_Delay>

	Uart_flush();
 80005e0:	f000 f95e 	bl	80008a0 <Uart_flush>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 80005e4:	481f      	ldr	r0, [pc, #124]	; (8000664 <ESP_Init+0xa0>)
 80005e6:	f000 f9df 	bl	80009a8 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 80005ea:	bf00      	nop
 80005ec:	481e      	ldr	r0, [pc, #120]	; (8000668 <ESP_Init+0xa4>)
 80005ee:	f000 fa0b 	bl	8000a08 <Wait_for>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <ESP_Init+0x28>

	Uart_flush();
 80005f8:	f000 f952 	bl	80008a0 <Uart_flush>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 80005fc:	481b      	ldr	r0, [pc, #108]	; (800066c <ESP_Init+0xa8>)
 80005fe:	f000 f9d3 	bl	80009a8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000602:	bf00      	nop
 8000604:	4818      	ldr	r0, [pc, #96]	; (8000668 <ESP_Init+0xa4>)
 8000606:	f000 f9ff 	bl	8000a08 <Wait_for>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f9      	beq.n	8000604 <ESP_Init+0x40>

	Uart_flush();
 8000610:	f000 f946 	bl	80008a0 <Uart_flush>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000614:	f107 0008 	add.w	r0, r7, #8
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4914      	ldr	r1, [pc, #80]	; (8000670 <ESP_Init+0xac>)
 800061e:	f002 fc43 	bl	8002ea8 <siprintf>
	Uart_sendstring(data);
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f9be 	bl	80009a8 <Uart_sendstring>
	while (!(Wait_for("GOT IP\r\n")));
 800062c:	bf00      	nop
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <ESP_Init+0xb0>)
 8000630:	f000 f9ea 	bl	8000a08 <Wait_for>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d0f9      	beq.n	800062e <ESP_Init+0x6a>

	Uart_flush();
 800063a:	f000 f931 	bl	80008a0 <Uart_flush>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <ESP_Init+0xb4>)
 8000640:	f000 f9b2 	bl	80009a8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000644:	bf00      	nop
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <ESP_Init+0xa4>)
 8000648:	f000 f9de 	bl	8000a08 <Wait_for>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d0f9      	beq.n	8000646 <ESP_Init+0x82>

	Uart_flush();
 8000652:	f000 f925 	bl	80008a0 <Uart_flush>

}
 8000656:	bf00      	nop
 8000658:	3758      	adds	r7, #88	; 0x58
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08003738 	.word	0x08003738
 8000664:	08003744 	.word	0x08003744
 8000668:	0800374c 	.word	0x0800374c
 800066c:	08003754 	.word	0x08003754
 8000670:	08003764 	.word	0x08003764
 8000674:	0800377c 	.word	0x0800377c
 8000678:	08003788 	.word	0x08003788

0800067c <ESP_Send_Multi>:
	Ringbuf_init();

}

void ESP_Send_Multi (char *APIkey, int numberoffileds, uint16_t value[])
{
 800067c:	b580      	push	{r7, lr}
 800067e:	f5ad 7d3e 	sub.w	sp, sp, #760	; 0x2f8
 8000682:	af00      	add	r7, sp, #0
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	6018      	str	r0, [r3, #0]
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	6019      	str	r1, [r3, #0]
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	601a      	str	r2, [r3, #0]
	char local_buf[500] = {0};
 8000694:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	3304      	adds	r3, #4
 800069e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fbf7 	bl	8002e98 <memset>
	char local_buf2[30] = {0};
 80006aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	3304      	adds	r3, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	831a      	strh	r2, [r3, #24]
	char field_buf[200] = {0};
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	3304      	adds	r3, #4
 80006ce:	22c4      	movs	r2, #196	; 0xc4
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fbe0 	bl	8002e98 <memset>


	Uart_sendstring("AT+CIPSTART=\"TCP\",\"184.106.153.149\",80\r\n");
 80006d8:	4844      	ldr	r0, [pc, #272]	; (80007ec <ESP_Send_Multi+0x170>)
 80006da:	f000 f965 	bl	80009a8 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 80006de:	bf00      	nop
 80006e0:	4843      	ldr	r0, [pc, #268]	; (80007f0 <ESP_Send_Multi+0x174>)
 80006e2:	f000 f991 	bl	8000a08 <Wait_for>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0f9      	beq.n	80006e0 <ESP_Send_Multi+0x64>

	sprintf (local_buf, "GET /update?api_key=%s", APIkey);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	493f      	ldr	r1, [pc, #252]	; (80007f4 <ESP_Send_Multi+0x178>)
 80006f8:	f002 fbd6 	bl	8002ea8 <siprintf>
	for (int i=0; i<numberoffileds; i++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8000702:	e01c      	b.n	800073e <ESP_Send_Multi+0xc2>
	{
		sprintf(field_buf, "&field%d=%u",i+1, value[i]);
 8000704:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000708:	1c59      	adds	r1, r3, #1
 800070a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	1d3a      	adds	r2, r7, #4
 8000712:	6812      	ldr	r2, [r2, #0]
 8000714:	4413      	add	r3, r2
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	f107 0014 	add.w	r0, r7, #20
 800071c:	460a      	mov	r2, r1
 800071e:	4936      	ldr	r1, [pc, #216]	; (80007f8 <ESP_Send_Multi+0x17c>)
 8000720:	f002 fbc2 	bl	8002ea8 <siprintf>
		strcat (local_buf, field_buf);
 8000724:	f107 0214 	add.w	r2, r7, #20
 8000728:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fbda 	bl	8002ee8 <strcat>
	for (int i=0; i<numberoffileds; i++)
 8000734:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8000738:	3301      	adds	r3, #1
 800073a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	dbdb      	blt.n	8000704 <ESP_Send_Multi+0x88>
	}

	strcat(local_buf, "\r\n");
 800074c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd45 	bl	80001e0 <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800075e:	4413      	add	r3, r2
 8000760:	4a26      	ldr	r2, [pc, #152]	; (80007fc <ESP_Send_Multi+0x180>)
 8000762:	8811      	ldrh	r1, [r2, #0]
 8000764:	7892      	ldrb	r2, [r2, #2]
 8000766:	8019      	strh	r1, [r3, #0]
 8000768:	709a      	strb	r2, [r3, #2]
	int len = strlen (local_buf);
 800076a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fd36 	bl	80001e0 <strlen>
 8000774:	4603      	mov	r3, r0
 8000776:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0

	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 800077a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800077e:	f8d7 22f0 	ldr.w	r2, [r7, #752]	; 0x2f0
 8000782:	491f      	ldr	r1, [pc, #124]	; (8000800 <ESP_Send_Multi+0x184>)
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fb8f 	bl	8002ea8 <siprintf>
	Uart_sendstring(local_buf2);
 800078a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f90a 	bl	80009a8 <Uart_sendstring>
	while (!(Wait_for(">")));
 8000794:	bf00      	nop
 8000796:	481b      	ldr	r0, [pc, #108]	; (8000804 <ESP_Send_Multi+0x188>)
 8000798:	f000 f936 	bl	8000a08 <Wait_for>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f9      	beq.n	8000796 <ESP_Send_Multi+0x11a>

	Uart_sendstring (local_buf);
 80007a2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f8fe 	bl	80009a8 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 80007ac:	bf00      	nop
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <ESP_Send_Multi+0x18c>)
 80007b0:	f000 f92a 	bl	8000a08 <Wait_for>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f9      	beq.n	80007ae <ESP_Send_Multi+0x132>

	while (!(Wait_for("CLOSED")));
 80007ba:	bf00      	nop
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <ESP_Send_Multi+0x190>)
 80007be:	f000 f923 	bl	8000a08 <Wait_for>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f9      	beq.n	80007bc <ESP_Send_Multi+0x140>

	bufclr(local_buf);
 80007c8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fedb 	bl	8000588 <bufclr>
	bufclr(local_buf2);
 80007d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fed6 	bl	8000588 <bufclr>

	Ringbuf_init();
 80007dc:	f000 f818 	bl	8000810 <Ringbuf_init>

}
 80007e0:	bf00      	nop
 80007e2:	f507 773e 	add.w	r7, r7, #760	; 0x2f8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	08003798 	.word	0x08003798
 80007f0:	0800374c 	.word	0x0800374c
 80007f4:	08003810 	.word	0x08003810
 80007f8:	08003828 	.word	0x08003828
 80007fc:	08003834 	.word	0x08003834
 8000800:	080037e8 	.word	0x080037e8
 8000804:	080037f8 	.word	0x080037f8
 8000808:	080037fc 	.word	0x080037fc
 800080c:	08003808 	.word	0x08003808

08000810 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <Ringbuf_init+0x3c>)
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <Ringbuf_init+0x40>)
 8000818:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <Ringbuf_init+0x44>)
 800081c:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <Ringbuf_init+0x48>)
 800081e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <Ringbuf_init+0x4c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <Ringbuf_init+0x4c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f042 0201 	orr.w	r2, r2, #1
 800082e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <Ringbuf_init+0x4c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <Ringbuf_init+0x4c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f042 0220 	orr.w	r2, r2, #32
 800083e:	60da      	str	r2, [r3, #12]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000130 	.word	0x20000130
 8000850:	2000008c 	.word	0x2000008c
 8000854:	2000012c 	.word	0x2000012c
 8000858:	200000d4 	.word	0x200000d4
 800085c:	20000144 	.word	0x20000144

08000860 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	3301      	adds	r3, #1
 8000872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000876:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	429a      	cmp	r2, r3
 8000880:	d007      	beq.n	8000892 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	79f9      	ldrb	r1, [r7, #7]
 800088a:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <Uart_flush>:

void Uart_flush (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

	  _rx_buffer->head = _rx_buffer->tail;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <Uart_flush+0x1c>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <Uart_flush+0x1c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80008ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000130 	.word	0x20000130

080008c0 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <Uart_read+0x4c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <Uart_read+0x4c>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d102      	bne.n	80008dc <Uart_read+0x1c>
  {
    return -1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e010      	b.n	80008fe <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <Uart_read+0x4c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <Uart_read+0x4c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	5cd3      	ldrb	r3, [r2, r3]
 80008e8:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <Uart_read+0x4c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <Uart_read+0x4c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008fa:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80008fe:	4618      	mov	r0, r3
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000130 	.word	0x20000130

08000910 <Uart_write>:

void Uart_write(int c)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db21      	blt.n	8000962 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <Uart_write+0x60>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	3301      	adds	r3, #1
 8000926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800092a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800092c:	bf00      	nop
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <Uart_write+0x60>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	429a      	cmp	r2, r3
 8000938:	d0f9      	beq.n	800092e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <Uart_write+0x60>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <Uart_write+0x60>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	b2c9      	uxtb	r1, r1
 8000948:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <Uart_write+0x60>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <Uart_write+0x64>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <Uart_write+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000960:	60da      	str	r2, [r3, #12]
	}
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000012c 	.word	0x2000012c
 8000974:	20000144 	.word	0x20000144

08000978 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <IsDataAvailable+0x2c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	b29a      	uxth	r2, r3
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <IsDataAvailable+0x2c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	b29b      	uxth	r3, r3
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	b29b      	uxth	r3, r3
 8000990:	3340      	adds	r3, #64	; 0x40
 8000992:	b29b      	uxth	r3, r3
 8000994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000130 	.word	0x20000130

080009a8 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80009b0:	e006      	b.n	80009c0 <Uart_sendstring+0x18>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	1c5a      	adds	r2, r3, #1
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffa8 	bl	8000910 <Uart_write>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f4      	bne.n	80009b2 <Uart_sendstring+0xa>
}
 80009c8:	bf00      	nop
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <Uart_peek+0x30>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <Uart_peek+0x30>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d102      	bne.n	80009ee <Uart_peek+0x1a>
  {
    return -1;
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ec:	e005      	b.n	80009fa <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <Uart_peek+0x30>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <Uart_peek+0x30>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f8:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	20000130 	.word	0x20000130

08000a08 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fbe3 	bl	80001e0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffaa 	bl	8000978 <IsDataAvailable>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0fa      	beq.n	8000a20 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8000a2a:	f7ff ffd3 	bl	80009d4 <Uart_peek>
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4299      	cmp	r1, r3
 8000a3a:	d01a      	beq.n	8000a72 <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <Wait_for+0xa4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <Wait_for+0xa4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a4c:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8000a4e:	e7e6      	b.n	8000a1e <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3301      	adds	r3, #1
 8000a54:	60fb      	str	r3, [r7, #12]
		Uart_read();
 8000a56:	f7ff ff33 	bl	80008c0 <Uart_read>
		if (so_far == len) return 1;
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d101      	bne.n	8000a66 <Wait_for+0x5e>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e01d      	b.n	8000aa2 <Wait_for+0x9a>
		while (!IsDataAvailable());
 8000a66:	bf00      	nop
 8000a68:	f7ff ff86 	bl	8000978 <IsDataAvailable>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0fa      	beq.n	8000a68 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 8000a72:	f7ff ffaf 	bl	80009d4 <Uart_peek>
 8000a76:	4601      	mov	r1, r0
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4299      	cmp	r1, r3
 8000a82:	d0e5      	beq.n	8000a50 <Wait_for+0x48>
	}

	if (so_far != len)
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d002      	beq.n	8000a92 <Wait_for+0x8a>
	{
		so_far = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
		goto again;
 8000a90:	e7c5      	b.n	8000a1e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d101      	bne.n	8000a9e <Wait_for+0x96>
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e001      	b.n	8000aa2 <Wait_for+0x9a>
	else return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000130 	.word	0x20000130

08000ab0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d013      	beq.n	8000afa <Uart_isr+0x4a>
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	f003 0320 	and.w	r3, r3, #32
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00e      	beq.n	8000afa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8000aea:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <Uart_isr+0xac>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff feb4 	bl	8000860 <store_char>
        return;
 8000af8:	e02c      	b.n	8000b54 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d027      	beq.n	8000b54 <Uart_isr+0xa4>
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d022      	beq.n	8000b54 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <Uart_isr+0xb0>)
 8000b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <Uart_isr+0xb0>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d108      	bne.n	8000b2c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b28:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000b2a:	e012      	b.n	8000b52 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <Uart_isr+0xb0>)
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <Uart_isr+0xb0>)
 8000b32:	5cd3      	ldrb	r3, [r2, r3]
 8000b34:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <Uart_isr+0xb0>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <Uart_isr+0xb0>)
 8000b42:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	7bba      	ldrb	r2, [r7, #14]
 8000b50:	605a      	str	r2, [r3, #4]
    	return;
 8000b52:	bf00      	nop
    }
}
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000130 	.word	0x20000130
 8000b60:	200000d4 	.word	0x200000d4

08000b64 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "dht11.h"

uint32_t DWT_Delay_Init(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <DWT_Delay_Init+0x58>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <DWT_Delay_Init+0x58>)
 8000b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b72:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <DWT_Delay_Init+0x58>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <DWT_Delay_Init+0x58>)
 8000b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b7e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <DWT_Delay_Init+0x5c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <DWT_Delay_Init+0x5c>)
 8000b86:	f023 0301 	bic.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <DWT_Delay_Init+0x5c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <DWT_Delay_Init+0x5c>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <DWT_Delay_Init+0x5c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000b9e:	bf00      	nop
     __ASM volatile ("NOP");
 8000ba0:	bf00      	nop
  __ASM volatile ("NOP");
 8000ba2:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <DWT_Delay_Init+0x5c>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000bac:	2300      	movs	r3, #0
 8000bae:	e000      	b.n	8000bb2 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000bb0:	2301      	movs	r3, #1
  }
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000edf0 	.word	0xe000edf0
 8000bc0:	e0001000 	.word	0xe0001000

08000bc4 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000bcc:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <delay+0x40>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000bd2:	f001 fc4f 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <delay+0x44>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	0c9b      	lsrs	r3, r3, #18
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	fb02 f303 	mul.w	r3, r2, r3
 8000be6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000be8:	bf00      	nop
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <delay+0x40>)
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	1ad2      	subs	r2, r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d3f8      	bcc.n	8000bea <delay+0x26>
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e0001000 	.word	0xe0001000
 8000c08:	431bde83 	.word	0x431bde83

08000c0c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c28:	887b      	ldrh	r3, [r7, #2]
 8000c2a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 fe24 	bl	8001888 <HAL_GPIO_Init>
}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	4619      	mov	r1, r3
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f000 fe06 	bl	8001888 <HAL_GPIO_Init>
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <DHT_Start>:


void DHT_Start (void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000c88:	f7ff ff6c 	bl	8000b64 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <DHT_Start+0x40>)
 8000c90:	f7ff ffbc 	bl	8000c0c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000c94:	2200      	movs	r2, #0
 8000c96:	2102      	movs	r1, #2
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <DHT_Start+0x40>)
 8000c9a:	f000 ff91 	bl	8001bc0 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000c9e:	f244 6050 	movw	r0, #18000	; 0x4650
 8000ca2:	f7ff ff8f 	bl	8000bc4 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <DHT_Start+0x40>)
 8000cac:	f000 ff88 	bl	8001bc0 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8000cb0:	2014      	movs	r0, #20
 8000cb2:	f7ff ff87 	bl	8000bc4 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DHT_Start+0x40>)
 8000cba:	f7ff ffc5 	bl	8000c48 <Set_Pin_Input>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000cd2:	2028      	movs	r0, #40	; 0x28
 8000cd4:	f7ff ff76 	bl	8000bc4 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4811      	ldr	r0, [pc, #68]	; (8000d20 <DHT_Check_Response+0x58>)
 8000cdc:	f000 ff58 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10e      	bne.n	8000d04 <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000ce6:	2050      	movs	r0, #80	; 0x50
 8000ce8:	f7ff ff6c 	bl	8000bc4 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000cec:	2102      	movs	r1, #2
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <DHT_Check_Response+0x58>)
 8000cf0:	f000 ff4e 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <DHT_Check_Response+0x38>
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	e001      	b.n	8000d04 <DHT_Check_Response+0x3c>
		else Response = -1;
 8000d00:	23ff      	movs	r3, #255	; 0xff
 8000d02:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000d04:	bf00      	nop
 8000d06:	2102      	movs	r1, #2
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <DHT_Check_Response+0x58>)
 8000d0a:	f000 ff41 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f8      	bne.n	8000d06 <DHT_Check_Response+0x3e>

	return Response;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020000 	.word	0x40020000

08000d24 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	e037      	b.n	8000da0 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000d30:	bf00      	nop
 8000d32:	2102      	movs	r1, #2
 8000d34:	481e      	ldr	r0, [pc, #120]	; (8000db0 <DHT_Read+0x8c>)
 8000d36:	f000 ff2b 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f8      	beq.n	8000d32 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f7ff ff3f 	bl	8000bc4 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000d46:	2102      	movs	r1, #2
 8000d48:	4819      	ldr	r0, [pc, #100]	; (8000db0 <DHT_Read+0x8c>)
 8000d4a:	f000 ff21 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10e      	bne.n	8000d72 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	b25a      	sxtb	r2, r3
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	e00b      	b.n	8000d8a <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	f1c3 0307 	rsb	r3, r3, #7
 8000d78:	2201      	movs	r2, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	b25a      	sxtb	r2, r3
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000d8a:	bf00      	nop
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4808      	ldr	r0, [pc, #32]	; (8000db0 <DHT_Read+0x8c>)
 8000d90:	f000 fefe 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f8      	bne.n	8000d8c <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000d9a:	79bb      	ldrb	r3, [r7, #6]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	71bb      	strb	r3, [r7, #6]
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d9c4      	bls.n	8000d30 <DHT_Read+0xc>
	}
	return i;
 8000da6:	79fb      	ldrb	r3, [r7, #7]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40020000 	.word	0x40020000

08000db4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000dbc:	f7ff ff62 	bl	8000c84 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000dc0:	f7ff ff82 	bl	8000cc8 <DHT_Check_Response>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <DHT_GetData+0xa4>)
 8000dca:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000dcc:	f7ff ffaa 	bl	8000d24 <DHT_Read>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <DHT_GetData+0xa8>)
 8000dd6:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000dd8:	f7ff ffa4 	bl	8000d24 <DHT_Read>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <DHT_GetData+0xac>)
 8000de2:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000de4:	f7ff ff9e 	bl	8000d24 <DHT_Read>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <DHT_GetData+0xb0>)
 8000dee:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000df0:	f7ff ff98 	bl	8000d24 <DHT_Read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <DHT_GetData+0xb4>)
 8000dfa:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000dfc:	f7ff ff92 	bl	8000d24 <DHT_Read>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <DHT_GetData+0xb8>)
 8000e06:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <DHT_GetData+0xb8>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <DHT_GetData+0xa8>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <DHT_GetData+0xac>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <DHT_GetData+0xb0>)
 8000e1c:	7812      	ldrb	r2, [r2, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <DHT_GetData+0xb4>)
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	4413      	add	r3, r2
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d111      	bne.n	8000e4e <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <DHT_GetData+0xb0>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	ee07 3a90 	vmov	s15, r3
 8000e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <DHT_GetData+0xa8>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000011c 	.word	0x2000011c
 8000e5c:	20000134 	.word	0x20000134
 8000e60:	20000136 	.word	0x20000136
 8000e64:	20000135 	.word	0x20000135
 8000e68:	2000013a 	.word	0x2000013a
 8000e6c:	20000138 	.word	0x20000138

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int i=0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f000 fb5d 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f863 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e82:	f000 f96f 	bl	8001164 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e86:	f000 f943 	bl	8001110 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e8a:	f000 f8c7 	bl	800101c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e8e:	f000 f915 	bl	80010bc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ESP_Init ("myphone", "fyyw3057")  ;
 8000e92:	4926      	ldr	r1, [pc, #152]	; (8000f2c <main+0xbc>)
 8000e94:	4826      	ldr	r0, [pc, #152]	; (8000f30 <main+0xc0>)
 8000e96:	f7ff fb95 	bl	80005c4 <ESP_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  DHT_GetData(&DHT11_Data);
 8000e9a:	4826      	ldr	r0, [pc, #152]	; (8000f34 <main+0xc4>)
 8000e9c:	f7ff ff8a 	bl	8000db4 <DHT_GetData>
	   Temperature = DHT11_Data.Temperature;
 8000ea0:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <main+0xc4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a24      	ldr	r2, [pc, #144]	; (8000f38 <main+0xc8>)
 8000ea6:	6013      	str	r3, [r2, #0]
	   Humidity = DHT11_Data.Humidity;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <main+0xc4>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4a23      	ldr	r2, [pc, #140]	; (8000f3c <main+0xcc>)
 8000eae:	6013      	str	r3, [r2, #0]
	 HAL_Delay(1000);
 8000eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb4:	f000 fbb2 	bl	800161c <HAL_Delay>

	 if (i==0){
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10f      	bne.n	8000ede <main+0x6e>
		 i=1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
	  value_buf[0]=Temperature-10 ;}
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <main+0xc8>)
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ecc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed4:	ee17 3a90 	vmov	r3, s15
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <main+0xd0>)
 8000edc:	801a      	strh	r2, [r3, #0]
	 if (i==1){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d10f      	bne.n	8000f04 <main+0x94>
		 i=0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
	  value_buf[0]=Temperature+10 ;}
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <main+0xc8>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000ef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000efa:	ee17 3a90 	vmov	r3, s15
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <main+0xd0>)
 8000f02:	801a      	strh	r2, [r3, #0]
	  value_buf[1]=Humidity  ;
 8000f04:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <main+0xcc>)
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <main+0xd0>)
 8000f16:	805a      	strh	r2, [r3, #2]
	  ESP_Send_Multi("5792EMEDPV6JEKAI",2,value_buf) ;
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <main+0xd0>)
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <main+0xd4>)
 8000f1e:	f7ff fbad 	bl	800067c <ESP_Send_Multi>
	  HAL_Delay(15000);
 8000f22:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000f26:	f000 fb79 	bl	800161c <HAL_Delay>
	  DHT_GetData(&DHT11_Data);
 8000f2a:	e7b6      	b.n	8000e9a <main+0x2a>
 8000f2c:	08003838 	.word	0x08003838
 8000f30:	08003844 	.word	0x08003844
 8000f34:	20000188 	.word	0x20000188
 8000f38:	2000013c 	.word	0x2000013c
 8000f3c:	2000021c 	.word	0x2000021c
 8000f40:	20000140 	.word	0x20000140
 8000f44:	0800384c 	.word	0x0800384c

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 ff9e 	bl	8002e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemClock_Config+0xcc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	; (8001014 <SystemClock_Config+0xcc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <SystemClock_Config+0xd0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <SystemClock_Config+0xd0>)
 8000f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000fc0:	2354      	movs	r3, #84	; 0x54
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fe0f 	bl	8001bf4 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fdc:	f000 f930 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 f871 	bl	80020e4 <HAL_RCC_ClockConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001008:	f000 f91a 	bl	8001240 <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	3750      	adds	r7, #80	; 0x50
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001022:	f107 0308 	add.w	r3, r7, #8
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_TIM1_Init+0x98>)
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <MX_TIM1_Init+0x9c>)
 800103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_TIM1_Init+0x98>)
 8001040:	2231      	movs	r2, #49	; 0x31
 8001042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_TIM1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_TIM1_Init+0x98>)
 800104c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_TIM1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_TIM1_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_TIM1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <MX_TIM1_Init+0x98>)
 8001066:	f001 fa39 	bl	80024dc <HAL_TIM_Base_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001070:	f000 f8e6 	bl	8001240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	4619      	mov	r1, r3
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MX_TIM1_Init+0x98>)
 8001082:	f001 fa7a 	bl	800257a <HAL_TIM_ConfigClockSource>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800108c:	f000 f8d8 	bl	8001240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001090:	2300      	movs	r3, #0
 8001092:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_TIM1_Init+0x98>)
 800109e:	f001 fc4d 	bl	800293c <HAL_TIMEx_MasterConfigSynchronization>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010a8:	f000 f8ca 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000190 	.word	0x20000190
 80010b8:	40010000 	.word	0x40010000

080010bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_USART1_UART_Init+0x50>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_USART1_UART_Init+0x4c>)
 80010f4:	f001 fc90 	bl	8002a18 <HAL_UART_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010fe:	f000 f89f 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000144 	.word	0x20000144
 800110c:	40011000 	.word	0x40011000

08001110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001116:	4a12      	ldr	r2, [pc, #72]	; (8001160 <MX_USART2_UART_Init+0x50>)
 8001118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800111c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001122:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001136:	220c      	movs	r2, #12
 8001138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <MX_USART2_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_USART2_UART_Init+0x4c>)
 8001148:	f001 fc66 	bl	8002a18 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001152:	f000 f875 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001d8 	.word	0x200001d8
 8001160:	40004400 	.word	0x40004400

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_GPIO_Init+0xd0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a2c      	ldr	r2, [pc, #176]	; (8001234 <MX_GPIO_Init+0xd0>)
 8001184:	f043 0304 	orr.w	r3, r3, #4
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_GPIO_Init+0xd0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_GPIO_Init+0xd0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <MX_GPIO_Init+0xd0>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <MX_GPIO_Init+0xd0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_GPIO_Init+0xd0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <MX_GPIO_Init+0xd0>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_GPIO_Init+0xd0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_GPIO_Init+0xd0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <MX_GPIO_Init+0xd0>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_GPIO_Init+0xd0>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2122      	movs	r1, #34	; 0x22
 80011ee:	4812      	ldr	r0, [pc, #72]	; (8001238 <MX_GPIO_Init+0xd4>)
 80011f0:	f000 fce6 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_GPIO_Init+0xd8>)
 800120c:	f000 fb3c 	bl	8001888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8001210:	2322      	movs	r3, #34	; 0x22
 8001212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_GPIO_Init+0xd4>)
 8001228:	f000 fb2e 	bl	8001888 <HAL_GPIO_Init>

}
 800122c:	bf00      	nop
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020800 	.word	0x40020800

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <HAL_MspInit+0x4c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_MspInit+0x4c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800128e:	2007      	movs	r0, #7
 8001290:	f000 fab8 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_TIM_Base_MspInit+0x3c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d10d      	bne.n	80012ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_TIM_Base_MspInit+0x40>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	4a09      	ldr	r2, [pc, #36]	; (80012e0 <HAL_TIM_Base_MspInit+0x40>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6453      	str	r3, [r2, #68]	; 0x44
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_TIM_Base_MspInit+0x40>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40010000 	.word	0x40010000
 80012e0:	40023800 	.word	0x40023800

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a36      	ldr	r2, [pc, #216]	; (80013dc <HAL_UART_MspInit+0xf8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d135      	bne.n	8001372 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
 800130a:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 8001310:	f043 0310 	orr.w	r3, r3, #16
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800133e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001350:	2307      	movs	r3, #7
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4619      	mov	r1, r3
 800135a:	4822      	ldr	r0, [pc, #136]	; (80013e4 <HAL_UART_MspInit+0x100>)
 800135c:	f000 fa94 	bl	8001888 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 14);
 8001360:	220e      	movs	r2, #14
 8001362:	2100      	movs	r1, #0
 8001364:	2025      	movs	r0, #37	; 0x25
 8001366:	f000 fa58 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800136a:	2025      	movs	r0, #37	; 0x25
 800136c:	f000 fa71 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001370:	e030      	b.n	80013d4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_UART_MspInit+0x104>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d12b      	bne.n	80013d4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 8001386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_UART_MspInit+0xfc>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013b4:	230c      	movs	r3, #12
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c4:	2307      	movs	r3, #7
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_UART_MspInit+0x100>)
 80013d0:	f000 fa5a 	bl	8001888 <HAL_GPIO_Init>
}
 80013d4:	bf00      	nop
 80013d6:	3730      	adds	r7, #48	; 0x30
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40011000 	.word	0x40011000
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40004400 	.word	0x40004400

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <NMI_Handler+0x4>

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001438:	f000 f8d0 	bl	80015dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	 Uart_isr (&huart1);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USART1_IRQHandler+0x10>)
 8001446:	f7ff fb33 	bl	8000ab0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
 // HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000144 	.word	0x20000144

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f001 fcde 	bl	8002e44 <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20018000 	.word	0x20018000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	20000120 	.word	0x20000120
 80014bc:	20000238 	.word	0x20000238

080014c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800150e:	f7ff ffd7 	bl	80014c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f001 fc9d 	bl	8002e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff fcab 	bl	8000e70 <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800151c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001528:	080038bc 	.word	0x080038bc
  ldr r2, =_sbss
 800152c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001530:	20000234 	.word	0x20000234

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_Init+0x40>)
 8001542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_Init+0x40>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x40>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 f94f 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	2000      	movs	r0, #0
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fe70 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f967 	bl	800186e <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 f92f 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000220 	.word	0x20000220

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000220 	.word	0x20000220

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001680:	4013      	ands	r3, r2
 8001682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800168c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001696:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	60d3      	str	r3, [r2, #12]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <__NVIC_GetPriorityGrouping+0x18>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	f003 0307 	and.w	r3, r3, #7
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	db0b      	blt.n	80016f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f003 021f 	and.w	r2, r3, #31
 80016e0:	4907      	ldr	r1, [pc, #28]	; (8001700 <__NVIC_EnableIRQ+0x38>)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	2001      	movs	r0, #1
 80016ea:	fa00 f202 	lsl.w	r2, r0, r2
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000e100 	.word	0xe000e100

08001704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	db0a      	blt.n	800172e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b2da      	uxtb	r2, r3
 800171c:	490c      	ldr	r1, [pc, #48]	; (8001750 <__NVIC_SetPriority+0x4c>)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	440b      	add	r3, r1
 8001728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800172c:	e00a      	b.n	8001744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <__NVIC_SetPriority+0x50>)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	3b04      	subs	r3, #4
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	440b      	add	r3, r1
 8001742:	761a      	strb	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f1c3 0307 	rsb	r3, r3, #7
 8001772:	2b04      	cmp	r3, #4
 8001774:	bf28      	it	cs
 8001776:	2304      	movcs	r3, #4
 8001778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	2b06      	cmp	r3, #6
 8001780:	d902      	bls.n	8001788 <NVIC_EncodePriority+0x30>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b03      	subs	r3, #3
 8001786:	e000      	b.n	800178a <NVIC_EncodePriority+0x32>
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	401a      	ands	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a0:	f04f 31ff 	mov.w	r1, #4294967295
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	4313      	orrs	r3, r2
         );
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff8e 	bl	8001704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff29 	bl	8001664 <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff3e 	bl	80016ac <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff8e 	bl	8001758 <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5d 	bl	8001704 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff31 	bl	80016c8 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e159      	b.n	8001b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f040 8148 	bne.w	8001b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d005      	beq.n	80018da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d130      	bne.n	800193c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b03      	cmp	r3, #3
 8001946:	d017      	beq.n	8001978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d123      	bne.n	80019cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3208      	adds	r2, #8
 800198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	08da      	lsrs	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3208      	adds	r2, #8
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80a2 	beq.w	8001b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a56      	ldr	r2, [pc, #344]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b54      	ldr	r3, [pc, #336]	; (8001b70 <HAL_GPIO_Init+0x2e8>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2a:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_GPIO_Init+0x2ec>)
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a49      	ldr	r2, [pc, #292]	; (8001b78 <HAL_GPIO_Init+0x2f0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d019      	beq.n	8001a8a <HAL_GPIO_Init+0x202>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a48      	ldr	r2, [pc, #288]	; (8001b7c <HAL_GPIO_Init+0x2f4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_GPIO_Init+0x1fe>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a47      	ldr	r2, [pc, #284]	; (8001b80 <HAL_GPIO_Init+0x2f8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00d      	beq.n	8001a82 <HAL_GPIO_Init+0x1fa>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a46      	ldr	r2, [pc, #280]	; (8001b84 <HAL_GPIO_Init+0x2fc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x1f6>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_GPIO_Init+0x300>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_GPIO_Init+0x1f2>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x204>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_GPIO_Init+0x2ec>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ace:	4a2f      	ldr	r2, [pc, #188]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af8:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a1a      	ldr	r2, [pc, #104]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_GPIO_Init+0x304>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f aea2 	bls.w	80018a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e264      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d075      	beq.n	8001cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c12:	4ba3      	ldr	r3, [pc, #652]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d00c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4ba0      	ldr	r3, [pc, #640]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d112      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4b9d      	ldr	r3, [pc, #628]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c36:	d10b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4b99      	ldr	r3, [pc, #612]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d05b      	beq.n	8001cfc <HAL_RCC_OscConfig+0x108>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d157      	bne.n	8001cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e23f      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d106      	bne.n	8001c68 <HAL_RCC_OscConfig+0x74>
 8001c5a:	4b91      	ldr	r3, [pc, #580]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a90      	ldr	r2, [pc, #576]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x98>
 8001c72:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a8a      	ldr	r2, [pc, #552]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a87      	ldr	r2, [pc, #540]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c8c:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a83      	ldr	r2, [pc, #524]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a80      	ldr	r2, [pc, #512]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fcaa 	bl	8001604 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fca6 	bl	8001604 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e204      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b76      	ldr	r3, [pc, #472]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xc0>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc96 	bl	8001604 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fc92 	bl	8001604 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1f0      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0xe8>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d0a:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d16:	4b62      	ldr	r3, [pc, #392]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1c4      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b56      	ldr	r3, [pc, #344]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4952      	ldr	r1, [pc, #328]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <HAL_RCC_OscConfig+0x2b0>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fc4b 	bl	8001604 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff fc47 	bl	8001604 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1a5      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b46      	ldr	r3, [pc, #280]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4940      	ldr	r1, [pc, #256]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <HAL_RCC_OscConfig+0x2b0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fc2a 	bl	8001604 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fc26 	bl	8001604 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e184      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d030      	beq.n	8001e40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_RCC_OscConfig+0x2b4>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fc0a 	bl	8001604 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fc06 	bl	8001604 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e164      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x200>
 8001e12:	e015      	b.n	8001e40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_RCC_OscConfig+0x2b4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fbf3 	bl	8001604 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff fbef 	bl	8001604 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e14d      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a0 	beq.w	8001f8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10f      	bne.n	8001e7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_RCC_OscConfig+0x2b8>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fbb5 	bl	8001604 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	e011      	b.n	8001ec2 <HAL_RCC_OscConfig+0x2ce>
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	42470000 	.word	0x42470000
 8001ea8:	42470e80 	.word	0x42470e80
 8001eac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7ff fba8 	bl	8001604 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e106      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <HAL_RCC_OscConfig+0x4e4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d106      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
 8001ed6:	4b81      	ldr	r3, [pc, #516]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	4a80      	ldr	r2, [pc, #512]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee2:	e01c      	b.n	8001f1e <HAL_RCC_OscConfig+0x32a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x312>
 8001eec:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef8:	4b78      	ldr	r3, [pc, #480]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	4a77      	ldr	r2, [pc, #476]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	; 0x70
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0x32a>
 8001f06:	4b75      	ldr	r3, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0a:	4a74      	ldr	r2, [pc, #464]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	4a71      	ldr	r2, [pc, #452]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb6d 	bl	8001604 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fb69 	bl	8001604 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0c5      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	4b65      	ldr	r3, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ee      	beq.n	8001f2e <HAL_RCC_OscConfig+0x33a>
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb57 	bl	8001604 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff fb53 	bl	8001604 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0af      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ee      	bne.n	8001f5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b56      	ldr	r3, [pc, #344]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a55      	ldr	r2, [pc, #340]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 809b 	beq.w	80020ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f98:	4b50      	ldr	r3, [pc, #320]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d05c      	beq.n	800205e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d141      	bne.n	8002030 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b4c      	ldr	r3, [pc, #304]	; (80020e0 <HAL_RCC_OscConfig+0x4ec>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fb27 	bl	8001604 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff fb23 	bl	8001604 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e081      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fcc:	4b43      	ldr	r3, [pc, #268]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	019b      	lsls	r3, r3, #6
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	041b      	lsls	r3, r3, #16
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
 8001ffc:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <HAL_RCC_OscConfig+0x4ec>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fafc 	bl	8001604 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002010:	f7ff faf8 	bl	8001604 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e056      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x41c>
 800202e:	e04e      	b.n	80020ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x4ec>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fae5 	bl	8001604 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff fae1 	bl	8001604 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e03f      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x44a>
 800205c:	e037      	b.n	80020ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e032      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_RCC_OscConfig+0x4e8>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d028      	beq.n	80020ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d121      	bne.n	80020ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d11a      	bne.n	80020ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800209a:	4013      	ands	r3, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d111      	bne.n	80020ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	3b01      	subs	r3, #1
 80020b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40007000 	.word	0x40007000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	42470060 	.word	0x42470060

080020e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0cc      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d90c      	bls.n	8002120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b65      	ldr	r3, [pc, #404]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800215a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d044      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d119      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e067      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4934      	ldr	r1, [pc, #208]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7ff fa16 	bl	8001604 <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7ff fa12 	bl	8001604 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e04f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d20c      	bcs.n	800222c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4602      	mov	r2, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	490a      	ldr	r1, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f976 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08003860 	.word	0x08003860
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	2300      	movs	r3, #0
 80022c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c8:	4b67      	ldr	r3, [pc, #412]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d00d      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x40>
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	f200 80bd 	bhi.w	8002454 <HAL_RCC_GetSysClockFreq+0x1a4>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x34>
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x3a>
 80022e2:	e0b7      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b61      	ldr	r3, [pc, #388]	; (800246c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022e6:	60bb      	str	r3, [r7, #8]
       break;
 80022e8:	e0b7      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ea:	4b61      	ldr	r3, [pc, #388]	; (8002470 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80022ec:	60bb      	str	r3, [r7, #8]
      break;
 80022ee:	e0b4      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f0:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d04d      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002306:	4b58      	ldr	r3, [pc, #352]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	461a      	mov	r2, r3
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002316:	f04f 0100 	mov.w	r1, #0
 800231a:	ea02 0800 	and.w	r8, r2, r0
 800231e:	ea03 0901 	and.w	r9, r3, r1
 8002322:	4640      	mov	r0, r8
 8002324:	4649      	mov	r1, r9
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	014b      	lsls	r3, r1, #5
 8002330:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002334:	0142      	lsls	r2, r0, #5
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	ebb0 0008 	subs.w	r0, r0, r8
 800233e:	eb61 0109 	sbc.w	r1, r1, r9
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	018b      	lsls	r3, r1, #6
 800234c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002350:	0182      	lsls	r2, r0, #6
 8002352:	1a12      	subs	r2, r2, r0
 8002354:	eb63 0301 	sbc.w	r3, r3, r1
 8002358:	f04f 0000 	mov.w	r0, #0
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	00d9      	lsls	r1, r3, #3
 8002362:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002366:	00d0      	lsls	r0, r2, #3
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	eb12 0208 	adds.w	r2, r2, r8
 8002370:	eb43 0309 	adc.w	r3, r3, r9
 8002374:	f04f 0000 	mov.w	r0, #0
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	0259      	lsls	r1, r3, #9
 800237e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002382:	0250      	lsls	r0, r2, #9
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	f7fd ff7c 	bl	8000290 <__aeabi_uldivmod>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4613      	mov	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e04a      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	099b      	lsrs	r3, r3, #6
 80023a8:	461a      	mov	r2, r3
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	ea02 0400 	and.w	r4, r2, r0
 80023ba:	ea03 0501 	and.w	r5, r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	014b      	lsls	r3, r1, #5
 80023cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023d0:	0142      	lsls	r2, r0, #5
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	1b00      	subs	r0, r0, r4
 80023d8:	eb61 0105 	sbc.w	r1, r1, r5
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	018b      	lsls	r3, r1, #6
 80023e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023ea:	0182      	lsls	r2, r0, #6
 80023ec:	1a12      	subs	r2, r2, r0
 80023ee:	eb63 0301 	sbc.w	r3, r3, r1
 80023f2:	f04f 0000 	mov.w	r0, #0
 80023f6:	f04f 0100 	mov.w	r1, #0
 80023fa:	00d9      	lsls	r1, r3, #3
 80023fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002400:	00d0      	lsls	r0, r2, #3
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	1912      	adds	r2, r2, r4
 8002408:	eb45 0303 	adc.w	r3, r5, r3
 800240c:	f04f 0000 	mov.w	r0, #0
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	0299      	lsls	r1, r3, #10
 8002416:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800241a:	0290      	lsls	r0, r2, #10
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	461a      	mov	r2, r3
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	f7fd ff30 	bl	8000290 <__aeabi_uldivmod>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4613      	mov	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	f003 0303 	and.w	r3, r3, #3
 8002442:	3301      	adds	r3, #1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002450:	60bb      	str	r3, [r7, #8]
      break;
 8002452:	e002      	b.n	800245a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002456:	60bb      	str	r3, [r7, #8]
      break;
 8002458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245a:	68bb      	ldr	r3, [r7, #8]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	00f42400 	.word	0x00f42400
 8002470:	007a1200 	.word	0x007a1200

08002474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <HAL_RCC_GetHCLKFreq+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000000 	.word	0x20000000

0800248c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002490:	f7ff fff0 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 8002494:	4602      	mov	r2, r0
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	0a9b      	lsrs	r3, r3, #10
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	4903      	ldr	r1, [pc, #12]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a2:	5ccb      	ldrb	r3, [r1, r3]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	08003870 	.word	0x08003870

080024b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024b8:	f7ff ffdc 	bl	8002474 <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0b5b      	lsrs	r3, r3, #13
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4903      	ldr	r1, [pc, #12]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	08003870 	.word	0x08003870

080024dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e041      	b.n	8002572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe fecc 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f000 f8f4 	bl	8002708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b084      	sub	sp, #16
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_TIM_ConfigClockSource+0x1c>
 8002592:	2302      	movs	r3, #2
 8002594:	e0b4      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x186>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ce:	d03e      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xd4>
 80025d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d4:	f200 8087 	bhi.w	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025dc:	f000 8086 	beq.w	80026ec <HAL_TIM_ConfigClockSource+0x172>
 80025e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e4:	d87f      	bhi.n	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
 80025e6:	2b70      	cmp	r3, #112	; 0x70
 80025e8:	d01a      	beq.n	8002620 <HAL_TIM_ConfigClockSource+0xa6>
 80025ea:	2b70      	cmp	r3, #112	; 0x70
 80025ec:	d87b      	bhi.n	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
 80025ee:	2b60      	cmp	r3, #96	; 0x60
 80025f0:	d050      	beq.n	8002694 <HAL_TIM_ConfigClockSource+0x11a>
 80025f2:	2b60      	cmp	r3, #96	; 0x60
 80025f4:	d877      	bhi.n	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
 80025f6:	2b50      	cmp	r3, #80	; 0x50
 80025f8:	d03c      	beq.n	8002674 <HAL_TIM_ConfigClockSource+0xfa>
 80025fa:	2b50      	cmp	r3, #80	; 0x50
 80025fc:	d873      	bhi.n	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	d058      	beq.n	80026b4 <HAL_TIM_ConfigClockSource+0x13a>
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d86f      	bhi.n	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
 8002606:	2b30      	cmp	r3, #48	; 0x30
 8002608:	d064      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x15a>
 800260a:	2b30      	cmp	r3, #48	; 0x30
 800260c:	d86b      	bhi.n	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
 800260e:	2b20      	cmp	r3, #32
 8002610:	d060      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x15a>
 8002612:	2b20      	cmp	r3, #32
 8002614:	d867      	bhi.n	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d05c      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x15a>
 800261a:	2b10      	cmp	r3, #16
 800261c:	d05a      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0x15a>
 800261e:	e062      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6899      	ldr	r1, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f000 f964 	bl	80028fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002642:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	609a      	str	r2, [r3, #8]
      break;
 800264c:	e04f      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 f94d 	bl	80028fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002670:	609a      	str	r2, [r3, #8]
      break;
 8002672:	e03c      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	461a      	mov	r2, r3
 8002682:	f000 f8c1 	bl	8002808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2150      	movs	r1, #80	; 0x50
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f91a 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 8002692:	e02c      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f000 f8e0 	bl	8002866 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2160      	movs	r1, #96	; 0x60
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f90a 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026b2:	e01c      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f000 f8a1 	bl	8002808 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2140      	movs	r1, #64	; 0x40
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 f8fa 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026d2:	e00c      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f000 f8f1 	bl	80028c6 <TIM_ITRx_SetConfig>
      break;
 80026e4:	e003      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      break;
 80026ea:	e000      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a34      	ldr	r2, [pc, #208]	; (80027ec <TIM_Base_SetConfig+0xe4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00f      	beq.n	8002740 <TIM_Base_SetConfig+0x38>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002726:	d00b      	beq.n	8002740 <TIM_Base_SetConfig+0x38>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a31      	ldr	r2, [pc, #196]	; (80027f0 <TIM_Base_SetConfig+0xe8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d007      	beq.n	8002740 <TIM_Base_SetConfig+0x38>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a30      	ldr	r2, [pc, #192]	; (80027f4 <TIM_Base_SetConfig+0xec>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0x38>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <TIM_Base_SetConfig+0xf0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d108      	bne.n	8002752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a25      	ldr	r2, [pc, #148]	; (80027ec <TIM_Base_SetConfig+0xe4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01b      	beq.n	8002792 <TIM_Base_SetConfig+0x8a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d017      	beq.n	8002792 <TIM_Base_SetConfig+0x8a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <TIM_Base_SetConfig+0xe8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <TIM_Base_SetConfig+0x8a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <TIM_Base_SetConfig+0xec>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00f      	beq.n	8002792 <TIM_Base_SetConfig+0x8a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <TIM_Base_SetConfig+0xf0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00b      	beq.n	8002792 <TIM_Base_SetConfig+0x8a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <TIM_Base_SetConfig+0xf4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <TIM_Base_SetConfig+0x8a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <TIM_Base_SetConfig+0xf8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d003      	beq.n	8002792 <TIM_Base_SetConfig+0x8a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <TIM_Base_SetConfig+0xfc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d108      	bne.n	80027a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a08      	ldr	r2, [pc, #32]	; (80027ec <TIM_Base_SetConfig+0xe4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d103      	bne.n	80027d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	615a      	str	r2, [r3, #20]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800
 80027f8:	40000c00 	.word	0x40000c00
 80027fc:	40014000 	.word	0x40014000
 8002800:	40014400 	.word	0x40014400
 8002804:	40014800 	.word	0x40014800

08002808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f023 0201 	bic.w	r2, r3, #1
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f023 030a 	bic.w	r3, r3, #10
 8002844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002866:	b480      	push	{r7}
 8002868:	b087      	sub	sp, #28
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f023 0210 	bic.w	r2, r3, #16
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	031b      	lsls	r3, r3, #12
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	621a      	str	r2, [r3, #32]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f043 0307 	orr.w	r3, r3, #7
 80028e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	021a      	lsls	r2, r3, #8
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	431a      	orrs	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002950:	2302      	movs	r3, #2
 8002952:	e050      	b.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d018      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d013      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10c      	bne.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40010000 	.word	0x40010000
 8002a08:	40000400 	.word	0x40000400
 8002a0c:	40000800 	.word	0x40000800
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40014000 	.word	0x40014000

08002a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e03f      	b.n	8002aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe fc50 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f829 	bl	8002ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab8:	b09f      	sub	sp, #124	; 0x7c
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aca:	68d9      	ldr	r1, [r3, #12]
 8002acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	ea40 0301 	orr.w	r3, r0, r1
 8002ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002af8:	f021 010c 	bic.w	r1, r1, #12
 8002afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b02:	430b      	orrs	r3, r1
 8002b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b12:	6999      	ldr	r1, [r3, #24]
 8002b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	ea40 0301 	orr.w	r3, r0, r1
 8002b1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4bc5      	ldr	r3, [pc, #788]	; (8002e38 <UART_SetConfig+0x384>)
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d004      	beq.n	8002b32 <UART_SetConfig+0x7e>
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4bc3      	ldr	r3, [pc, #780]	; (8002e3c <UART_SetConfig+0x388>)
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d103      	bne.n	8002b3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b32:	f7ff fcbf 	bl	80024b4 <HAL_RCC_GetPCLK2Freq>
 8002b36:	6778      	str	r0, [r7, #116]	; 0x74
 8002b38:	e002      	b.n	8002b40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b3a:	f7ff fca7 	bl	800248c <HAL_RCC_GetPCLK1Freq>
 8002b3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b48:	f040 80b6 	bne.w	8002cb8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4e:	461c      	mov	r4, r3
 8002b50:	f04f 0500 	mov.w	r5, #0
 8002b54:	4622      	mov	r2, r4
 8002b56:	462b      	mov	r3, r5
 8002b58:	1891      	adds	r1, r2, r2
 8002b5a:	6439      	str	r1, [r7, #64]	; 0x40
 8002b5c:	415b      	adcs	r3, r3
 8002b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b64:	1912      	adds	r2, r2, r4
 8002b66:	eb45 0303 	adc.w	r3, r5, r3
 8002b6a:	f04f 0000 	mov.w	r0, #0
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	00d9      	lsls	r1, r3, #3
 8002b74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b78:	00d0      	lsls	r0, r2, #3
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	1911      	adds	r1, r2, r4
 8002b80:	6639      	str	r1, [r7, #96]	; 0x60
 8002b82:	416b      	adcs	r3, r5
 8002b84:	667b      	str	r3, [r7, #100]	; 0x64
 8002b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	1891      	adds	r1, r2, r2
 8002b92:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b94:	415b      	adcs	r3, r3
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ba0:	f7fd fb76 	bl	8000290 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4ba5      	ldr	r3, [pc, #660]	; (8002e40 <UART_SetConfig+0x38c>)
 8002baa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	011e      	lsls	r6, r3, #4
 8002bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb4:	461c      	mov	r4, r3
 8002bb6:	f04f 0500 	mov.w	r5, #0
 8002bba:	4622      	mov	r2, r4
 8002bbc:	462b      	mov	r3, r5
 8002bbe:	1891      	adds	r1, r2, r2
 8002bc0:	6339      	str	r1, [r7, #48]	; 0x30
 8002bc2:	415b      	adcs	r3, r3
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bca:	1912      	adds	r2, r2, r4
 8002bcc:	eb45 0303 	adc.w	r3, r5, r3
 8002bd0:	f04f 0000 	mov.w	r0, #0
 8002bd4:	f04f 0100 	mov.w	r1, #0
 8002bd8:	00d9      	lsls	r1, r3, #3
 8002bda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bde:	00d0      	lsls	r0, r2, #3
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	1911      	adds	r1, r2, r4
 8002be6:	65b9      	str	r1, [r7, #88]	; 0x58
 8002be8:	416b      	adcs	r3, r5
 8002bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	1891      	adds	r1, r2, r2
 8002bf8:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bfa:	415b      	adcs	r3, r3
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002c06:	f7fd fb43 	bl	8000290 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <UART_SetConfig+0x38c>)
 8002c10:	fba3 1302 	umull	r1, r3, r3, r2
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	3332      	adds	r3, #50	; 0x32
 8002c22:	4a87      	ldr	r2, [pc, #540]	; (8002e40 <UART_SetConfig+0x38c>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c30:	441e      	add	r6, r3
 8002c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c34:	4618      	mov	r0, r3
 8002c36:	f04f 0100 	mov.w	r1, #0
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	1894      	adds	r4, r2, r2
 8002c40:	623c      	str	r4, [r7, #32]
 8002c42:	415b      	adcs	r3, r3
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c4a:	1812      	adds	r2, r2, r0
 8002c4c:	eb41 0303 	adc.w	r3, r1, r3
 8002c50:	f04f 0400 	mov.w	r4, #0
 8002c54:	f04f 0500 	mov.w	r5, #0
 8002c58:	00dd      	lsls	r5, r3, #3
 8002c5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c5e:	00d4      	lsls	r4, r2, #3
 8002c60:	4622      	mov	r2, r4
 8002c62:	462b      	mov	r3, r5
 8002c64:	1814      	adds	r4, r2, r0
 8002c66:	653c      	str	r4, [r7, #80]	; 0x50
 8002c68:	414b      	adcs	r3, r1
 8002c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	461a      	mov	r2, r3
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	1891      	adds	r1, r2, r2
 8002c78:	61b9      	str	r1, [r7, #24]
 8002c7a:	415b      	adcs	r3, r3
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002c86:	f7fd fb03 	bl	8000290 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <UART_SetConfig+0x38c>)
 8002c90:	fba3 1302 	umull	r1, r3, r3, r2
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	2164      	movs	r1, #100	; 0x64
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	3332      	adds	r3, #50	; 0x32
 8002ca2:	4a67      	ldr	r2, [pc, #412]	; (8002e40 <UART_SetConfig+0x38c>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	f003 0207 	and.w	r2, r3, #7
 8002cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4432      	add	r2, r6
 8002cb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cb6:	e0b9      	b.n	8002e2c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cba:	461c      	mov	r4, r3
 8002cbc:	f04f 0500 	mov.w	r5, #0
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	1891      	adds	r1, r2, r2
 8002cc6:	6139      	str	r1, [r7, #16]
 8002cc8:	415b      	adcs	r3, r3
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cd0:	1912      	adds	r2, r2, r4
 8002cd2:	eb45 0303 	adc.w	r3, r5, r3
 8002cd6:	f04f 0000 	mov.w	r0, #0
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	00d9      	lsls	r1, r3, #3
 8002ce0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ce4:	00d0      	lsls	r0, r2, #3
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	eb12 0804 	adds.w	r8, r2, r4
 8002cee:	eb43 0905 	adc.w	r9, r3, r5
 8002cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	008b      	lsls	r3, r1, #2
 8002d06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d0a:	0082      	lsls	r2, r0, #2
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	4649      	mov	r1, r9
 8002d10:	f7fd fabe 	bl	8000290 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <UART_SetConfig+0x38c>)
 8002d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	011e      	lsls	r6, r3, #4
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	4618      	mov	r0, r3
 8002d26:	f04f 0100 	mov.w	r1, #0
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	1894      	adds	r4, r2, r2
 8002d30:	60bc      	str	r4, [r7, #8]
 8002d32:	415b      	adcs	r3, r3
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d3a:	1812      	adds	r2, r2, r0
 8002d3c:	eb41 0303 	adc.w	r3, r1, r3
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	f04f 0500 	mov.w	r5, #0
 8002d48:	00dd      	lsls	r5, r3, #3
 8002d4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d4e:	00d4      	lsls	r4, r2, #3
 8002d50:	4622      	mov	r2, r4
 8002d52:	462b      	mov	r3, r5
 8002d54:	1814      	adds	r4, r2, r0
 8002d56:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d58:	414b      	adcs	r3, r1
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	008b      	lsls	r3, r1, #2
 8002d70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d74:	0082      	lsls	r2, r0, #2
 8002d76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d7a:	f7fd fa89 	bl	8000290 <__aeabi_uldivmod>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4b2f      	ldr	r3, [pc, #188]	; (8002e40 <UART_SetConfig+0x38c>)
 8002d84:	fba3 1302 	umull	r1, r3, r3, r2
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	2164      	movs	r1, #100	; 0x64
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	3332      	adds	r3, #50	; 0x32
 8002d96:	4a2a      	ldr	r2, [pc, #168]	; (8002e40 <UART_SetConfig+0x38c>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da2:	441e      	add	r6, r3
 8002da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da6:	4618      	mov	r0, r3
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	1894      	adds	r4, r2, r2
 8002db2:	603c      	str	r4, [r7, #0]
 8002db4:	415b      	adcs	r3, r3
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dbc:	1812      	adds	r2, r2, r0
 8002dbe:	eb41 0303 	adc.w	r3, r1, r3
 8002dc2:	f04f 0400 	mov.w	r4, #0
 8002dc6:	f04f 0500 	mov.w	r5, #0
 8002dca:	00dd      	lsls	r5, r3, #3
 8002dcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dd0:	00d4      	lsls	r4, r2, #3
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	462b      	mov	r3, r5
 8002dd6:	eb12 0a00 	adds.w	sl, r2, r0
 8002dda:	eb43 0b01 	adc.w	fp, r3, r1
 8002dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	008b      	lsls	r3, r1, #2
 8002df2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002df6:	0082      	lsls	r2, r0, #2
 8002df8:	4650      	mov	r0, sl
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	f7fd fa48 	bl	8000290 <__aeabi_uldivmod>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <UART_SetConfig+0x38c>)
 8002e06:	fba3 1302 	umull	r1, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2164      	movs	r1, #100	; 0x64
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	; 0x32
 8002e18:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <UART_SetConfig+0x38c>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 020f 	and.w	r2, r3, #15
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4432      	add	r2, r6
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	377c      	adds	r7, #124	; 0x7c
 8002e30:	46bd      	mov	sp, r7
 8002e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e36:	bf00      	nop
 8002e38:	40011000 	.word	0x40011000
 8002e3c:	40011400 	.word	0x40011400
 8002e40:	51eb851f 	.word	0x51eb851f

08002e44 <__errno>:
 8002e44:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <__errno+0x8>)
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	2000000c 	.word	0x2000000c

08002e50 <__libc_init_array>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	4d0d      	ldr	r5, [pc, #52]	; (8002e88 <__libc_init_array+0x38>)
 8002e54:	4c0d      	ldr	r4, [pc, #52]	; (8002e8c <__libc_init_array+0x3c>)
 8002e56:	1b64      	subs	r4, r4, r5
 8002e58:	10a4      	asrs	r4, r4, #2
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	42a6      	cmp	r6, r4
 8002e5e:	d109      	bne.n	8002e74 <__libc_init_array+0x24>
 8002e60:	4d0b      	ldr	r5, [pc, #44]	; (8002e90 <__libc_init_array+0x40>)
 8002e62:	4c0c      	ldr	r4, [pc, #48]	; (8002e94 <__libc_init_array+0x44>)
 8002e64:	f000 fc5c 	bl	8003720 <_init>
 8002e68:	1b64      	subs	r4, r4, r5
 8002e6a:	10a4      	asrs	r4, r4, #2
 8002e6c:	2600      	movs	r6, #0
 8002e6e:	42a6      	cmp	r6, r4
 8002e70:	d105      	bne.n	8002e7e <__libc_init_array+0x2e>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e78:	4798      	blx	r3
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7ee      	b.n	8002e5c <__libc_init_array+0xc>
 8002e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e82:	4798      	blx	r3
 8002e84:	3601      	adds	r6, #1
 8002e86:	e7f2      	b.n	8002e6e <__libc_init_array+0x1e>
 8002e88:	080038b4 	.word	0x080038b4
 8002e8c:	080038b4 	.word	0x080038b4
 8002e90:	080038b4 	.word	0x080038b4
 8002e94:	080038b8 	.word	0x080038b8

08002e98 <memset>:
 8002e98:	4402      	add	r2, r0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d100      	bne.n	8002ea2 <memset+0xa>
 8002ea0:	4770      	bx	lr
 8002ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea6:	e7f9      	b.n	8002e9c <memset+0x4>

08002ea8 <siprintf>:
 8002ea8:	b40e      	push	{r1, r2, r3}
 8002eaa:	b500      	push	{lr}
 8002eac:	b09c      	sub	sp, #112	; 0x70
 8002eae:	ab1d      	add	r3, sp, #116	; 0x74
 8002eb0:	9002      	str	r0, [sp, #8]
 8002eb2:	9006      	str	r0, [sp, #24]
 8002eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002eb8:	4809      	ldr	r0, [pc, #36]	; (8002ee0 <siprintf+0x38>)
 8002eba:	9107      	str	r1, [sp, #28]
 8002ebc:	9104      	str	r1, [sp, #16]
 8002ebe:	4909      	ldr	r1, [pc, #36]	; (8002ee4 <siprintf+0x3c>)
 8002ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ec4:	9105      	str	r1, [sp, #20]
 8002ec6:	6800      	ldr	r0, [r0, #0]
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	a902      	add	r1, sp, #8
 8002ecc:	f000 f876 	bl	8002fbc <_svfiprintf_r>
 8002ed0:	9b02      	ldr	r3, [sp, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	b01c      	add	sp, #112	; 0x70
 8002ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002edc:	b003      	add	sp, #12
 8002ede:	4770      	bx	lr
 8002ee0:	2000000c 	.word	0x2000000c
 8002ee4:	ffff0208 	.word	0xffff0208

08002ee8 <strcat>:
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	4602      	mov	r2, r0
 8002eec:	7814      	ldrb	r4, [r2, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	3201      	adds	r2, #1
 8002ef2:	2c00      	cmp	r4, #0
 8002ef4:	d1fa      	bne.n	8002eec <strcat+0x4>
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002efc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	d1f9      	bne.n	8002ef8 <strcat+0x10>
 8002f04:	bd10      	pop	{r4, pc}

08002f06 <__ssputs_r>:
 8002f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0a:	688e      	ldr	r6, [r1, #8]
 8002f0c:	429e      	cmp	r6, r3
 8002f0e:	4682      	mov	sl, r0
 8002f10:	460c      	mov	r4, r1
 8002f12:	4690      	mov	r8, r2
 8002f14:	461f      	mov	r7, r3
 8002f16:	d838      	bhi.n	8002f8a <__ssputs_r+0x84>
 8002f18:	898a      	ldrh	r2, [r1, #12]
 8002f1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f1e:	d032      	beq.n	8002f86 <__ssputs_r+0x80>
 8002f20:	6825      	ldr	r5, [r4, #0]
 8002f22:	6909      	ldr	r1, [r1, #16]
 8002f24:	eba5 0901 	sub.w	r9, r5, r1
 8002f28:	6965      	ldr	r5, [r4, #20]
 8002f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f32:	3301      	adds	r3, #1
 8002f34:	444b      	add	r3, r9
 8002f36:	106d      	asrs	r5, r5, #1
 8002f38:	429d      	cmp	r5, r3
 8002f3a:	bf38      	it	cc
 8002f3c:	461d      	movcc	r5, r3
 8002f3e:	0553      	lsls	r3, r2, #21
 8002f40:	d531      	bpl.n	8002fa6 <__ssputs_r+0xa0>
 8002f42:	4629      	mov	r1, r5
 8002f44:	f000 fb46 	bl	80035d4 <_malloc_r>
 8002f48:	4606      	mov	r6, r0
 8002f4a:	b950      	cbnz	r0, 8002f62 <__ssputs_r+0x5c>
 8002f4c:	230c      	movs	r3, #12
 8002f4e:	f8ca 3000 	str.w	r3, [sl]
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f58:	81a3      	strh	r3, [r4, #12]
 8002f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f62:	6921      	ldr	r1, [r4, #16]
 8002f64:	464a      	mov	r2, r9
 8002f66:	f000 fabd 	bl	80034e4 <memcpy>
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f74:	81a3      	strh	r3, [r4, #12]
 8002f76:	6126      	str	r6, [r4, #16]
 8002f78:	6165      	str	r5, [r4, #20]
 8002f7a:	444e      	add	r6, r9
 8002f7c:	eba5 0509 	sub.w	r5, r5, r9
 8002f80:	6026      	str	r6, [r4, #0]
 8002f82:	60a5      	str	r5, [r4, #8]
 8002f84:	463e      	mov	r6, r7
 8002f86:	42be      	cmp	r6, r7
 8002f88:	d900      	bls.n	8002f8c <__ssputs_r+0x86>
 8002f8a:	463e      	mov	r6, r7
 8002f8c:	4632      	mov	r2, r6
 8002f8e:	6820      	ldr	r0, [r4, #0]
 8002f90:	4641      	mov	r1, r8
 8002f92:	f000 fab5 	bl	8003500 <memmove>
 8002f96:	68a3      	ldr	r3, [r4, #8]
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	1b9b      	subs	r3, r3, r6
 8002f9c:	4432      	add	r2, r6
 8002f9e:	60a3      	str	r3, [r4, #8]
 8002fa0:	6022      	str	r2, [r4, #0]
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e7db      	b.n	8002f5e <__ssputs_r+0x58>
 8002fa6:	462a      	mov	r2, r5
 8002fa8:	f000 fb6e 	bl	8003688 <_realloc_r>
 8002fac:	4606      	mov	r6, r0
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d1e1      	bne.n	8002f76 <__ssputs_r+0x70>
 8002fb2:	6921      	ldr	r1, [r4, #16]
 8002fb4:	4650      	mov	r0, sl
 8002fb6:	f000 fabd 	bl	8003534 <_free_r>
 8002fba:	e7c7      	b.n	8002f4c <__ssputs_r+0x46>

08002fbc <_svfiprintf_r>:
 8002fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc0:	4698      	mov	r8, r3
 8002fc2:	898b      	ldrh	r3, [r1, #12]
 8002fc4:	061b      	lsls	r3, r3, #24
 8002fc6:	b09d      	sub	sp, #116	; 0x74
 8002fc8:	4607      	mov	r7, r0
 8002fca:	460d      	mov	r5, r1
 8002fcc:	4614      	mov	r4, r2
 8002fce:	d50e      	bpl.n	8002fee <_svfiprintf_r+0x32>
 8002fd0:	690b      	ldr	r3, [r1, #16]
 8002fd2:	b963      	cbnz	r3, 8002fee <_svfiprintf_r+0x32>
 8002fd4:	2140      	movs	r1, #64	; 0x40
 8002fd6:	f000 fafd 	bl	80035d4 <_malloc_r>
 8002fda:	6028      	str	r0, [r5, #0]
 8002fdc:	6128      	str	r0, [r5, #16]
 8002fde:	b920      	cbnz	r0, 8002fea <_svfiprintf_r+0x2e>
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe8:	e0d1      	b.n	800318e <_svfiprintf_r+0x1d2>
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	616b      	str	r3, [r5, #20]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ffc:	2330      	movs	r3, #48	; 0x30
 8002ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031a8 <_svfiprintf_r+0x1ec>
 8003002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003006:	f04f 0901 	mov.w	r9, #1
 800300a:	4623      	mov	r3, r4
 800300c:	469a      	mov	sl, r3
 800300e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003012:	b10a      	cbz	r2, 8003018 <_svfiprintf_r+0x5c>
 8003014:	2a25      	cmp	r2, #37	; 0x25
 8003016:	d1f9      	bne.n	800300c <_svfiprintf_r+0x50>
 8003018:	ebba 0b04 	subs.w	fp, sl, r4
 800301c:	d00b      	beq.n	8003036 <_svfiprintf_r+0x7a>
 800301e:	465b      	mov	r3, fp
 8003020:	4622      	mov	r2, r4
 8003022:	4629      	mov	r1, r5
 8003024:	4638      	mov	r0, r7
 8003026:	f7ff ff6e 	bl	8002f06 <__ssputs_r>
 800302a:	3001      	adds	r0, #1
 800302c:	f000 80aa 	beq.w	8003184 <_svfiprintf_r+0x1c8>
 8003030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003032:	445a      	add	r2, fp
 8003034:	9209      	str	r2, [sp, #36]	; 0x24
 8003036:	f89a 3000 	ldrb.w	r3, [sl]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80a2 	beq.w	8003184 <_svfiprintf_r+0x1c8>
 8003040:	2300      	movs	r3, #0
 8003042:	f04f 32ff 	mov.w	r2, #4294967295
 8003046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800304a:	f10a 0a01 	add.w	sl, sl, #1
 800304e:	9304      	str	r3, [sp, #16]
 8003050:	9307      	str	r3, [sp, #28]
 8003052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003056:	931a      	str	r3, [sp, #104]	; 0x68
 8003058:	4654      	mov	r4, sl
 800305a:	2205      	movs	r2, #5
 800305c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003060:	4851      	ldr	r0, [pc, #324]	; (80031a8 <_svfiprintf_r+0x1ec>)
 8003062:	f7fd f8c5 	bl	80001f0 <memchr>
 8003066:	9a04      	ldr	r2, [sp, #16]
 8003068:	b9d8      	cbnz	r0, 80030a2 <_svfiprintf_r+0xe6>
 800306a:	06d0      	lsls	r0, r2, #27
 800306c:	bf44      	itt	mi
 800306e:	2320      	movmi	r3, #32
 8003070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003074:	0711      	lsls	r1, r2, #28
 8003076:	bf44      	itt	mi
 8003078:	232b      	movmi	r3, #43	; 0x2b
 800307a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800307e:	f89a 3000 	ldrb.w	r3, [sl]
 8003082:	2b2a      	cmp	r3, #42	; 0x2a
 8003084:	d015      	beq.n	80030b2 <_svfiprintf_r+0xf6>
 8003086:	9a07      	ldr	r2, [sp, #28]
 8003088:	4654      	mov	r4, sl
 800308a:	2000      	movs	r0, #0
 800308c:	f04f 0c0a 	mov.w	ip, #10
 8003090:	4621      	mov	r1, r4
 8003092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003096:	3b30      	subs	r3, #48	; 0x30
 8003098:	2b09      	cmp	r3, #9
 800309a:	d94e      	bls.n	800313a <_svfiprintf_r+0x17e>
 800309c:	b1b0      	cbz	r0, 80030cc <_svfiprintf_r+0x110>
 800309e:	9207      	str	r2, [sp, #28]
 80030a0:	e014      	b.n	80030cc <_svfiprintf_r+0x110>
 80030a2:	eba0 0308 	sub.w	r3, r0, r8
 80030a6:	fa09 f303 	lsl.w	r3, r9, r3
 80030aa:	4313      	orrs	r3, r2
 80030ac:	9304      	str	r3, [sp, #16]
 80030ae:	46a2      	mov	sl, r4
 80030b0:	e7d2      	b.n	8003058 <_svfiprintf_r+0x9c>
 80030b2:	9b03      	ldr	r3, [sp, #12]
 80030b4:	1d19      	adds	r1, r3, #4
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	9103      	str	r1, [sp, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bfbb      	ittet	lt
 80030be:	425b      	neglt	r3, r3
 80030c0:	f042 0202 	orrlt.w	r2, r2, #2
 80030c4:	9307      	strge	r3, [sp, #28]
 80030c6:	9307      	strlt	r3, [sp, #28]
 80030c8:	bfb8      	it	lt
 80030ca:	9204      	strlt	r2, [sp, #16]
 80030cc:	7823      	ldrb	r3, [r4, #0]
 80030ce:	2b2e      	cmp	r3, #46	; 0x2e
 80030d0:	d10c      	bne.n	80030ec <_svfiprintf_r+0x130>
 80030d2:	7863      	ldrb	r3, [r4, #1]
 80030d4:	2b2a      	cmp	r3, #42	; 0x2a
 80030d6:	d135      	bne.n	8003144 <_svfiprintf_r+0x188>
 80030d8:	9b03      	ldr	r3, [sp, #12]
 80030da:	1d1a      	adds	r2, r3, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	9203      	str	r2, [sp, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bfb8      	it	lt
 80030e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80030e8:	3402      	adds	r4, #2
 80030ea:	9305      	str	r3, [sp, #20]
 80030ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80031b8 <_svfiprintf_r+0x1fc>
 80030f0:	7821      	ldrb	r1, [r4, #0]
 80030f2:	2203      	movs	r2, #3
 80030f4:	4650      	mov	r0, sl
 80030f6:	f7fd f87b 	bl	80001f0 <memchr>
 80030fa:	b140      	cbz	r0, 800310e <_svfiprintf_r+0x152>
 80030fc:	2340      	movs	r3, #64	; 0x40
 80030fe:	eba0 000a 	sub.w	r0, r0, sl
 8003102:	fa03 f000 	lsl.w	r0, r3, r0
 8003106:	9b04      	ldr	r3, [sp, #16]
 8003108:	4303      	orrs	r3, r0
 800310a:	3401      	adds	r4, #1
 800310c:	9304      	str	r3, [sp, #16]
 800310e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003112:	4826      	ldr	r0, [pc, #152]	; (80031ac <_svfiprintf_r+0x1f0>)
 8003114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003118:	2206      	movs	r2, #6
 800311a:	f7fd f869 	bl	80001f0 <memchr>
 800311e:	2800      	cmp	r0, #0
 8003120:	d038      	beq.n	8003194 <_svfiprintf_r+0x1d8>
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <_svfiprintf_r+0x1f4>)
 8003124:	bb1b      	cbnz	r3, 800316e <_svfiprintf_r+0x1b2>
 8003126:	9b03      	ldr	r3, [sp, #12]
 8003128:	3307      	adds	r3, #7
 800312a:	f023 0307 	bic.w	r3, r3, #7
 800312e:	3308      	adds	r3, #8
 8003130:	9303      	str	r3, [sp, #12]
 8003132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003134:	4433      	add	r3, r6
 8003136:	9309      	str	r3, [sp, #36]	; 0x24
 8003138:	e767      	b.n	800300a <_svfiprintf_r+0x4e>
 800313a:	fb0c 3202 	mla	r2, ip, r2, r3
 800313e:	460c      	mov	r4, r1
 8003140:	2001      	movs	r0, #1
 8003142:	e7a5      	b.n	8003090 <_svfiprintf_r+0xd4>
 8003144:	2300      	movs	r3, #0
 8003146:	3401      	adds	r4, #1
 8003148:	9305      	str	r3, [sp, #20]
 800314a:	4619      	mov	r1, r3
 800314c:	f04f 0c0a 	mov.w	ip, #10
 8003150:	4620      	mov	r0, r4
 8003152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003156:	3a30      	subs	r2, #48	; 0x30
 8003158:	2a09      	cmp	r2, #9
 800315a:	d903      	bls.n	8003164 <_svfiprintf_r+0x1a8>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0c5      	beq.n	80030ec <_svfiprintf_r+0x130>
 8003160:	9105      	str	r1, [sp, #20]
 8003162:	e7c3      	b.n	80030ec <_svfiprintf_r+0x130>
 8003164:	fb0c 2101 	mla	r1, ip, r1, r2
 8003168:	4604      	mov	r4, r0
 800316a:	2301      	movs	r3, #1
 800316c:	e7f0      	b.n	8003150 <_svfiprintf_r+0x194>
 800316e:	ab03      	add	r3, sp, #12
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	462a      	mov	r2, r5
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <_svfiprintf_r+0x1f8>)
 8003176:	a904      	add	r1, sp, #16
 8003178:	4638      	mov	r0, r7
 800317a:	f3af 8000 	nop.w
 800317e:	1c42      	adds	r2, r0, #1
 8003180:	4606      	mov	r6, r0
 8003182:	d1d6      	bne.n	8003132 <_svfiprintf_r+0x176>
 8003184:	89ab      	ldrh	r3, [r5, #12]
 8003186:	065b      	lsls	r3, r3, #25
 8003188:	f53f af2c 	bmi.w	8002fe4 <_svfiprintf_r+0x28>
 800318c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800318e:	b01d      	add	sp, #116	; 0x74
 8003190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003194:	ab03      	add	r3, sp, #12
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	462a      	mov	r2, r5
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <_svfiprintf_r+0x1f8>)
 800319c:	a904      	add	r1, sp, #16
 800319e:	4638      	mov	r0, r7
 80031a0:	f000 f87a 	bl	8003298 <_printf_i>
 80031a4:	e7eb      	b.n	800317e <_svfiprintf_r+0x1c2>
 80031a6:	bf00      	nop
 80031a8:	08003878 	.word	0x08003878
 80031ac:	08003882 	.word	0x08003882
 80031b0:	00000000 	.word	0x00000000
 80031b4:	08002f07 	.word	0x08002f07
 80031b8:	0800387e 	.word	0x0800387e

080031bc <_printf_common>:
 80031bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	4616      	mov	r6, r2
 80031c2:	4699      	mov	r9, r3
 80031c4:	688a      	ldr	r2, [r1, #8]
 80031c6:	690b      	ldr	r3, [r1, #16]
 80031c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bfb8      	it	lt
 80031d0:	4613      	movlt	r3, r2
 80031d2:	6033      	str	r3, [r6, #0]
 80031d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031d8:	4607      	mov	r7, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	b10a      	cbz	r2, 80031e2 <_printf_common+0x26>
 80031de:	3301      	adds	r3, #1
 80031e0:	6033      	str	r3, [r6, #0]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	0699      	lsls	r1, r3, #26
 80031e6:	bf42      	ittt	mi
 80031e8:	6833      	ldrmi	r3, [r6, #0]
 80031ea:	3302      	addmi	r3, #2
 80031ec:	6033      	strmi	r3, [r6, #0]
 80031ee:	6825      	ldr	r5, [r4, #0]
 80031f0:	f015 0506 	ands.w	r5, r5, #6
 80031f4:	d106      	bne.n	8003204 <_printf_common+0x48>
 80031f6:	f104 0a19 	add.w	sl, r4, #25
 80031fa:	68e3      	ldr	r3, [r4, #12]
 80031fc:	6832      	ldr	r2, [r6, #0]
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	42ab      	cmp	r3, r5
 8003202:	dc26      	bgt.n	8003252 <_printf_common+0x96>
 8003204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003208:	1e13      	subs	r3, r2, #0
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	bf18      	it	ne
 800320e:	2301      	movne	r3, #1
 8003210:	0692      	lsls	r2, r2, #26
 8003212:	d42b      	bmi.n	800326c <_printf_common+0xb0>
 8003214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003218:	4649      	mov	r1, r9
 800321a:	4638      	mov	r0, r7
 800321c:	47c0      	blx	r8
 800321e:	3001      	adds	r0, #1
 8003220:	d01e      	beq.n	8003260 <_printf_common+0xa4>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	68e5      	ldr	r5, [r4, #12]
 8003226:	6832      	ldr	r2, [r6, #0]
 8003228:	f003 0306 	and.w	r3, r3, #6
 800322c:	2b04      	cmp	r3, #4
 800322e:	bf08      	it	eq
 8003230:	1aad      	subeq	r5, r5, r2
 8003232:	68a3      	ldr	r3, [r4, #8]
 8003234:	6922      	ldr	r2, [r4, #16]
 8003236:	bf0c      	ite	eq
 8003238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800323c:	2500      	movne	r5, #0
 800323e:	4293      	cmp	r3, r2
 8003240:	bfc4      	itt	gt
 8003242:	1a9b      	subgt	r3, r3, r2
 8003244:	18ed      	addgt	r5, r5, r3
 8003246:	2600      	movs	r6, #0
 8003248:	341a      	adds	r4, #26
 800324a:	42b5      	cmp	r5, r6
 800324c:	d11a      	bne.n	8003284 <_printf_common+0xc8>
 800324e:	2000      	movs	r0, #0
 8003250:	e008      	b.n	8003264 <_printf_common+0xa8>
 8003252:	2301      	movs	r3, #1
 8003254:	4652      	mov	r2, sl
 8003256:	4649      	mov	r1, r9
 8003258:	4638      	mov	r0, r7
 800325a:	47c0      	blx	r8
 800325c:	3001      	adds	r0, #1
 800325e:	d103      	bne.n	8003268 <_printf_common+0xac>
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003268:	3501      	adds	r5, #1
 800326a:	e7c6      	b.n	80031fa <_printf_common+0x3e>
 800326c:	18e1      	adds	r1, r4, r3
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	2030      	movs	r0, #48	; 0x30
 8003272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003276:	4422      	add	r2, r4
 8003278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800327c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003280:	3302      	adds	r3, #2
 8003282:	e7c7      	b.n	8003214 <_printf_common+0x58>
 8003284:	2301      	movs	r3, #1
 8003286:	4622      	mov	r2, r4
 8003288:	4649      	mov	r1, r9
 800328a:	4638      	mov	r0, r7
 800328c:	47c0      	blx	r8
 800328e:	3001      	adds	r0, #1
 8003290:	d0e6      	beq.n	8003260 <_printf_common+0xa4>
 8003292:	3601      	adds	r6, #1
 8003294:	e7d9      	b.n	800324a <_printf_common+0x8e>
	...

08003298 <_printf_i>:
 8003298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800329c:	460c      	mov	r4, r1
 800329e:	4691      	mov	r9, r2
 80032a0:	7e27      	ldrb	r7, [r4, #24]
 80032a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032a4:	2f78      	cmp	r7, #120	; 0x78
 80032a6:	4680      	mov	r8, r0
 80032a8:	469a      	mov	sl, r3
 80032aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032ae:	d807      	bhi.n	80032c0 <_printf_i+0x28>
 80032b0:	2f62      	cmp	r7, #98	; 0x62
 80032b2:	d80a      	bhi.n	80032ca <_printf_i+0x32>
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	f000 80d8 	beq.w	800346a <_printf_i+0x1d2>
 80032ba:	2f58      	cmp	r7, #88	; 0x58
 80032bc:	f000 80a3 	beq.w	8003406 <_printf_i+0x16e>
 80032c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032c8:	e03a      	b.n	8003340 <_printf_i+0xa8>
 80032ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ce:	2b15      	cmp	r3, #21
 80032d0:	d8f6      	bhi.n	80032c0 <_printf_i+0x28>
 80032d2:	a001      	add	r0, pc, #4	; (adr r0, 80032d8 <_printf_i+0x40>)
 80032d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80032d8:	08003331 	.word	0x08003331
 80032dc:	08003345 	.word	0x08003345
 80032e0:	080032c1 	.word	0x080032c1
 80032e4:	080032c1 	.word	0x080032c1
 80032e8:	080032c1 	.word	0x080032c1
 80032ec:	080032c1 	.word	0x080032c1
 80032f0:	08003345 	.word	0x08003345
 80032f4:	080032c1 	.word	0x080032c1
 80032f8:	080032c1 	.word	0x080032c1
 80032fc:	080032c1 	.word	0x080032c1
 8003300:	080032c1 	.word	0x080032c1
 8003304:	08003451 	.word	0x08003451
 8003308:	08003375 	.word	0x08003375
 800330c:	08003433 	.word	0x08003433
 8003310:	080032c1 	.word	0x080032c1
 8003314:	080032c1 	.word	0x080032c1
 8003318:	08003473 	.word	0x08003473
 800331c:	080032c1 	.word	0x080032c1
 8003320:	08003375 	.word	0x08003375
 8003324:	080032c1 	.word	0x080032c1
 8003328:	080032c1 	.word	0x080032c1
 800332c:	0800343b 	.word	0x0800343b
 8003330:	680b      	ldr	r3, [r1, #0]
 8003332:	1d1a      	adds	r2, r3, #4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	600a      	str	r2, [r1, #0]
 8003338:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800333c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003340:	2301      	movs	r3, #1
 8003342:	e0a3      	b.n	800348c <_printf_i+0x1f4>
 8003344:	6825      	ldr	r5, [r4, #0]
 8003346:	6808      	ldr	r0, [r1, #0]
 8003348:	062e      	lsls	r6, r5, #24
 800334a:	f100 0304 	add.w	r3, r0, #4
 800334e:	d50a      	bpl.n	8003366 <_printf_i+0xce>
 8003350:	6805      	ldr	r5, [r0, #0]
 8003352:	600b      	str	r3, [r1, #0]
 8003354:	2d00      	cmp	r5, #0
 8003356:	da03      	bge.n	8003360 <_printf_i+0xc8>
 8003358:	232d      	movs	r3, #45	; 0x2d
 800335a:	426d      	negs	r5, r5
 800335c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003360:	485e      	ldr	r0, [pc, #376]	; (80034dc <_printf_i+0x244>)
 8003362:	230a      	movs	r3, #10
 8003364:	e019      	b.n	800339a <_printf_i+0x102>
 8003366:	f015 0f40 	tst.w	r5, #64	; 0x40
 800336a:	6805      	ldr	r5, [r0, #0]
 800336c:	600b      	str	r3, [r1, #0]
 800336e:	bf18      	it	ne
 8003370:	b22d      	sxthne	r5, r5
 8003372:	e7ef      	b.n	8003354 <_printf_i+0xbc>
 8003374:	680b      	ldr	r3, [r1, #0]
 8003376:	6825      	ldr	r5, [r4, #0]
 8003378:	1d18      	adds	r0, r3, #4
 800337a:	6008      	str	r0, [r1, #0]
 800337c:	0628      	lsls	r0, r5, #24
 800337e:	d501      	bpl.n	8003384 <_printf_i+0xec>
 8003380:	681d      	ldr	r5, [r3, #0]
 8003382:	e002      	b.n	800338a <_printf_i+0xf2>
 8003384:	0669      	lsls	r1, r5, #25
 8003386:	d5fb      	bpl.n	8003380 <_printf_i+0xe8>
 8003388:	881d      	ldrh	r5, [r3, #0]
 800338a:	4854      	ldr	r0, [pc, #336]	; (80034dc <_printf_i+0x244>)
 800338c:	2f6f      	cmp	r7, #111	; 0x6f
 800338e:	bf0c      	ite	eq
 8003390:	2308      	moveq	r3, #8
 8003392:	230a      	movne	r3, #10
 8003394:	2100      	movs	r1, #0
 8003396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800339a:	6866      	ldr	r6, [r4, #4]
 800339c:	60a6      	str	r6, [r4, #8]
 800339e:	2e00      	cmp	r6, #0
 80033a0:	bfa2      	ittt	ge
 80033a2:	6821      	ldrge	r1, [r4, #0]
 80033a4:	f021 0104 	bicge.w	r1, r1, #4
 80033a8:	6021      	strge	r1, [r4, #0]
 80033aa:	b90d      	cbnz	r5, 80033b0 <_printf_i+0x118>
 80033ac:	2e00      	cmp	r6, #0
 80033ae:	d04d      	beq.n	800344c <_printf_i+0x1b4>
 80033b0:	4616      	mov	r6, r2
 80033b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80033b6:	fb03 5711 	mls	r7, r3, r1, r5
 80033ba:	5dc7      	ldrb	r7, [r0, r7]
 80033bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033c0:	462f      	mov	r7, r5
 80033c2:	42bb      	cmp	r3, r7
 80033c4:	460d      	mov	r5, r1
 80033c6:	d9f4      	bls.n	80033b2 <_printf_i+0x11a>
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d10b      	bne.n	80033e4 <_printf_i+0x14c>
 80033cc:	6823      	ldr	r3, [r4, #0]
 80033ce:	07df      	lsls	r7, r3, #31
 80033d0:	d508      	bpl.n	80033e4 <_printf_i+0x14c>
 80033d2:	6923      	ldr	r3, [r4, #16]
 80033d4:	6861      	ldr	r1, [r4, #4]
 80033d6:	4299      	cmp	r1, r3
 80033d8:	bfde      	ittt	le
 80033da:	2330      	movle	r3, #48	; 0x30
 80033dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033e4:	1b92      	subs	r2, r2, r6
 80033e6:	6122      	str	r2, [r4, #16]
 80033e8:	f8cd a000 	str.w	sl, [sp]
 80033ec:	464b      	mov	r3, r9
 80033ee:	aa03      	add	r2, sp, #12
 80033f0:	4621      	mov	r1, r4
 80033f2:	4640      	mov	r0, r8
 80033f4:	f7ff fee2 	bl	80031bc <_printf_common>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d14c      	bne.n	8003496 <_printf_i+0x1fe>
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	b004      	add	sp, #16
 8003402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003406:	4835      	ldr	r0, [pc, #212]	; (80034dc <_printf_i+0x244>)
 8003408:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	680e      	ldr	r6, [r1, #0]
 8003410:	061f      	lsls	r7, r3, #24
 8003412:	f856 5b04 	ldr.w	r5, [r6], #4
 8003416:	600e      	str	r6, [r1, #0]
 8003418:	d514      	bpl.n	8003444 <_printf_i+0x1ac>
 800341a:	07d9      	lsls	r1, r3, #31
 800341c:	bf44      	itt	mi
 800341e:	f043 0320 	orrmi.w	r3, r3, #32
 8003422:	6023      	strmi	r3, [r4, #0]
 8003424:	b91d      	cbnz	r5, 800342e <_printf_i+0x196>
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	f023 0320 	bic.w	r3, r3, #32
 800342c:	6023      	str	r3, [r4, #0]
 800342e:	2310      	movs	r3, #16
 8003430:	e7b0      	b.n	8003394 <_printf_i+0xfc>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	f043 0320 	orr.w	r3, r3, #32
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	2378      	movs	r3, #120	; 0x78
 800343c:	4828      	ldr	r0, [pc, #160]	; (80034e0 <_printf_i+0x248>)
 800343e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003442:	e7e3      	b.n	800340c <_printf_i+0x174>
 8003444:	065e      	lsls	r6, r3, #25
 8003446:	bf48      	it	mi
 8003448:	b2ad      	uxthmi	r5, r5
 800344a:	e7e6      	b.n	800341a <_printf_i+0x182>
 800344c:	4616      	mov	r6, r2
 800344e:	e7bb      	b.n	80033c8 <_printf_i+0x130>
 8003450:	680b      	ldr	r3, [r1, #0]
 8003452:	6826      	ldr	r6, [r4, #0]
 8003454:	6960      	ldr	r0, [r4, #20]
 8003456:	1d1d      	adds	r5, r3, #4
 8003458:	600d      	str	r5, [r1, #0]
 800345a:	0635      	lsls	r5, r6, #24
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	d501      	bpl.n	8003464 <_printf_i+0x1cc>
 8003460:	6018      	str	r0, [r3, #0]
 8003462:	e002      	b.n	800346a <_printf_i+0x1d2>
 8003464:	0671      	lsls	r1, r6, #25
 8003466:	d5fb      	bpl.n	8003460 <_printf_i+0x1c8>
 8003468:	8018      	strh	r0, [r3, #0]
 800346a:	2300      	movs	r3, #0
 800346c:	6123      	str	r3, [r4, #16]
 800346e:	4616      	mov	r6, r2
 8003470:	e7ba      	b.n	80033e8 <_printf_i+0x150>
 8003472:	680b      	ldr	r3, [r1, #0]
 8003474:	1d1a      	adds	r2, r3, #4
 8003476:	600a      	str	r2, [r1, #0]
 8003478:	681e      	ldr	r6, [r3, #0]
 800347a:	6862      	ldr	r2, [r4, #4]
 800347c:	2100      	movs	r1, #0
 800347e:	4630      	mov	r0, r6
 8003480:	f7fc feb6 	bl	80001f0 <memchr>
 8003484:	b108      	cbz	r0, 800348a <_printf_i+0x1f2>
 8003486:	1b80      	subs	r0, r0, r6
 8003488:	6060      	str	r0, [r4, #4]
 800348a:	6863      	ldr	r3, [r4, #4]
 800348c:	6123      	str	r3, [r4, #16]
 800348e:	2300      	movs	r3, #0
 8003490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003494:	e7a8      	b.n	80033e8 <_printf_i+0x150>
 8003496:	6923      	ldr	r3, [r4, #16]
 8003498:	4632      	mov	r2, r6
 800349a:	4649      	mov	r1, r9
 800349c:	4640      	mov	r0, r8
 800349e:	47d0      	blx	sl
 80034a0:	3001      	adds	r0, #1
 80034a2:	d0ab      	beq.n	80033fc <_printf_i+0x164>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	079b      	lsls	r3, r3, #30
 80034a8:	d413      	bmi.n	80034d2 <_printf_i+0x23a>
 80034aa:	68e0      	ldr	r0, [r4, #12]
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	4298      	cmp	r0, r3
 80034b0:	bfb8      	it	lt
 80034b2:	4618      	movlt	r0, r3
 80034b4:	e7a4      	b.n	8003400 <_printf_i+0x168>
 80034b6:	2301      	movs	r3, #1
 80034b8:	4632      	mov	r2, r6
 80034ba:	4649      	mov	r1, r9
 80034bc:	4640      	mov	r0, r8
 80034be:	47d0      	blx	sl
 80034c0:	3001      	adds	r0, #1
 80034c2:	d09b      	beq.n	80033fc <_printf_i+0x164>
 80034c4:	3501      	adds	r5, #1
 80034c6:	68e3      	ldr	r3, [r4, #12]
 80034c8:	9903      	ldr	r1, [sp, #12]
 80034ca:	1a5b      	subs	r3, r3, r1
 80034cc:	42ab      	cmp	r3, r5
 80034ce:	dcf2      	bgt.n	80034b6 <_printf_i+0x21e>
 80034d0:	e7eb      	b.n	80034aa <_printf_i+0x212>
 80034d2:	2500      	movs	r5, #0
 80034d4:	f104 0619 	add.w	r6, r4, #25
 80034d8:	e7f5      	b.n	80034c6 <_printf_i+0x22e>
 80034da:	bf00      	nop
 80034dc:	08003889 	.word	0x08003889
 80034e0:	0800389a 	.word	0x0800389a

080034e4 <memcpy>:
 80034e4:	440a      	add	r2, r1
 80034e6:	4291      	cmp	r1, r2
 80034e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80034ec:	d100      	bne.n	80034f0 <memcpy+0xc>
 80034ee:	4770      	bx	lr
 80034f0:	b510      	push	{r4, lr}
 80034f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034fa:	4291      	cmp	r1, r2
 80034fc:	d1f9      	bne.n	80034f2 <memcpy+0xe>
 80034fe:	bd10      	pop	{r4, pc}

08003500 <memmove>:
 8003500:	4288      	cmp	r0, r1
 8003502:	b510      	push	{r4, lr}
 8003504:	eb01 0402 	add.w	r4, r1, r2
 8003508:	d902      	bls.n	8003510 <memmove+0x10>
 800350a:	4284      	cmp	r4, r0
 800350c:	4623      	mov	r3, r4
 800350e:	d807      	bhi.n	8003520 <memmove+0x20>
 8003510:	1e43      	subs	r3, r0, #1
 8003512:	42a1      	cmp	r1, r4
 8003514:	d008      	beq.n	8003528 <memmove+0x28>
 8003516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800351a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800351e:	e7f8      	b.n	8003512 <memmove+0x12>
 8003520:	4402      	add	r2, r0
 8003522:	4601      	mov	r1, r0
 8003524:	428a      	cmp	r2, r1
 8003526:	d100      	bne.n	800352a <memmove+0x2a>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800352e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003532:	e7f7      	b.n	8003524 <memmove+0x24>

08003534 <_free_r>:
 8003534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d048      	beq.n	80035cc <_free_r+0x98>
 800353a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353e:	9001      	str	r0, [sp, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f1a1 0404 	sub.w	r4, r1, #4
 8003546:	bfb8      	it	lt
 8003548:	18e4      	addlt	r4, r4, r3
 800354a:	f000 f8d3 	bl	80036f4 <__malloc_lock>
 800354e:	4a20      	ldr	r2, [pc, #128]	; (80035d0 <_free_r+0x9c>)
 8003550:	9801      	ldr	r0, [sp, #4]
 8003552:	6813      	ldr	r3, [r2, #0]
 8003554:	4615      	mov	r5, r2
 8003556:	b933      	cbnz	r3, 8003566 <_free_r+0x32>
 8003558:	6063      	str	r3, [r4, #4]
 800355a:	6014      	str	r4, [r2, #0]
 800355c:	b003      	add	sp, #12
 800355e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003562:	f000 b8cd 	b.w	8003700 <__malloc_unlock>
 8003566:	42a3      	cmp	r3, r4
 8003568:	d90b      	bls.n	8003582 <_free_r+0x4e>
 800356a:	6821      	ldr	r1, [r4, #0]
 800356c:	1862      	adds	r2, r4, r1
 800356e:	4293      	cmp	r3, r2
 8003570:	bf04      	itt	eq
 8003572:	681a      	ldreq	r2, [r3, #0]
 8003574:	685b      	ldreq	r3, [r3, #4]
 8003576:	6063      	str	r3, [r4, #4]
 8003578:	bf04      	itt	eq
 800357a:	1852      	addeq	r2, r2, r1
 800357c:	6022      	streq	r2, [r4, #0]
 800357e:	602c      	str	r4, [r5, #0]
 8003580:	e7ec      	b.n	800355c <_free_r+0x28>
 8003582:	461a      	mov	r2, r3
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	b10b      	cbz	r3, 800358c <_free_r+0x58>
 8003588:	42a3      	cmp	r3, r4
 800358a:	d9fa      	bls.n	8003582 <_free_r+0x4e>
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	1855      	adds	r5, r2, r1
 8003590:	42a5      	cmp	r5, r4
 8003592:	d10b      	bne.n	80035ac <_free_r+0x78>
 8003594:	6824      	ldr	r4, [r4, #0]
 8003596:	4421      	add	r1, r4
 8003598:	1854      	adds	r4, r2, r1
 800359a:	42a3      	cmp	r3, r4
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	d1dd      	bne.n	800355c <_free_r+0x28>
 80035a0:	681c      	ldr	r4, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	6053      	str	r3, [r2, #4]
 80035a6:	4421      	add	r1, r4
 80035a8:	6011      	str	r1, [r2, #0]
 80035aa:	e7d7      	b.n	800355c <_free_r+0x28>
 80035ac:	d902      	bls.n	80035b4 <_free_r+0x80>
 80035ae:	230c      	movs	r3, #12
 80035b0:	6003      	str	r3, [r0, #0]
 80035b2:	e7d3      	b.n	800355c <_free_r+0x28>
 80035b4:	6825      	ldr	r5, [r4, #0]
 80035b6:	1961      	adds	r1, r4, r5
 80035b8:	428b      	cmp	r3, r1
 80035ba:	bf04      	itt	eq
 80035bc:	6819      	ldreq	r1, [r3, #0]
 80035be:	685b      	ldreq	r3, [r3, #4]
 80035c0:	6063      	str	r3, [r4, #4]
 80035c2:	bf04      	itt	eq
 80035c4:	1949      	addeq	r1, r1, r5
 80035c6:	6021      	streq	r1, [r4, #0]
 80035c8:	6054      	str	r4, [r2, #4]
 80035ca:	e7c7      	b.n	800355c <_free_r+0x28>
 80035cc:	b003      	add	sp, #12
 80035ce:	bd30      	pop	{r4, r5, pc}
 80035d0:	20000124 	.word	0x20000124

080035d4 <_malloc_r>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	1ccd      	adds	r5, r1, #3
 80035d8:	f025 0503 	bic.w	r5, r5, #3
 80035dc:	3508      	adds	r5, #8
 80035de:	2d0c      	cmp	r5, #12
 80035e0:	bf38      	it	cc
 80035e2:	250c      	movcc	r5, #12
 80035e4:	2d00      	cmp	r5, #0
 80035e6:	4606      	mov	r6, r0
 80035e8:	db01      	blt.n	80035ee <_malloc_r+0x1a>
 80035ea:	42a9      	cmp	r1, r5
 80035ec:	d903      	bls.n	80035f6 <_malloc_r+0x22>
 80035ee:	230c      	movs	r3, #12
 80035f0:	6033      	str	r3, [r6, #0]
 80035f2:	2000      	movs	r0, #0
 80035f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f6:	f000 f87d 	bl	80036f4 <__malloc_lock>
 80035fa:	4921      	ldr	r1, [pc, #132]	; (8003680 <_malloc_r+0xac>)
 80035fc:	680a      	ldr	r2, [r1, #0]
 80035fe:	4614      	mov	r4, r2
 8003600:	b99c      	cbnz	r4, 800362a <_malloc_r+0x56>
 8003602:	4f20      	ldr	r7, [pc, #128]	; (8003684 <_malloc_r+0xb0>)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b923      	cbnz	r3, 8003612 <_malloc_r+0x3e>
 8003608:	4621      	mov	r1, r4
 800360a:	4630      	mov	r0, r6
 800360c:	f000 f862 	bl	80036d4 <_sbrk_r>
 8003610:	6038      	str	r0, [r7, #0]
 8003612:	4629      	mov	r1, r5
 8003614:	4630      	mov	r0, r6
 8003616:	f000 f85d 	bl	80036d4 <_sbrk_r>
 800361a:	1c43      	adds	r3, r0, #1
 800361c:	d123      	bne.n	8003666 <_malloc_r+0x92>
 800361e:	230c      	movs	r3, #12
 8003620:	6033      	str	r3, [r6, #0]
 8003622:	4630      	mov	r0, r6
 8003624:	f000 f86c 	bl	8003700 <__malloc_unlock>
 8003628:	e7e3      	b.n	80035f2 <_malloc_r+0x1e>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	1b5b      	subs	r3, r3, r5
 800362e:	d417      	bmi.n	8003660 <_malloc_r+0x8c>
 8003630:	2b0b      	cmp	r3, #11
 8003632:	d903      	bls.n	800363c <_malloc_r+0x68>
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	441c      	add	r4, r3
 8003638:	6025      	str	r5, [r4, #0]
 800363a:	e004      	b.n	8003646 <_malloc_r+0x72>
 800363c:	6863      	ldr	r3, [r4, #4]
 800363e:	42a2      	cmp	r2, r4
 8003640:	bf0c      	ite	eq
 8003642:	600b      	streq	r3, [r1, #0]
 8003644:	6053      	strne	r3, [r2, #4]
 8003646:	4630      	mov	r0, r6
 8003648:	f000 f85a 	bl	8003700 <__malloc_unlock>
 800364c:	f104 000b 	add.w	r0, r4, #11
 8003650:	1d23      	adds	r3, r4, #4
 8003652:	f020 0007 	bic.w	r0, r0, #7
 8003656:	1ac2      	subs	r2, r0, r3
 8003658:	d0cc      	beq.n	80035f4 <_malloc_r+0x20>
 800365a:	1a1b      	subs	r3, r3, r0
 800365c:	50a3      	str	r3, [r4, r2]
 800365e:	e7c9      	b.n	80035f4 <_malloc_r+0x20>
 8003660:	4622      	mov	r2, r4
 8003662:	6864      	ldr	r4, [r4, #4]
 8003664:	e7cc      	b.n	8003600 <_malloc_r+0x2c>
 8003666:	1cc4      	adds	r4, r0, #3
 8003668:	f024 0403 	bic.w	r4, r4, #3
 800366c:	42a0      	cmp	r0, r4
 800366e:	d0e3      	beq.n	8003638 <_malloc_r+0x64>
 8003670:	1a21      	subs	r1, r4, r0
 8003672:	4630      	mov	r0, r6
 8003674:	f000 f82e 	bl	80036d4 <_sbrk_r>
 8003678:	3001      	adds	r0, #1
 800367a:	d1dd      	bne.n	8003638 <_malloc_r+0x64>
 800367c:	e7cf      	b.n	800361e <_malloc_r+0x4a>
 800367e:	bf00      	nop
 8003680:	20000124 	.word	0x20000124
 8003684:	20000128 	.word	0x20000128

08003688 <_realloc_r>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	4607      	mov	r7, r0
 800368c:	4614      	mov	r4, r2
 800368e:	460e      	mov	r6, r1
 8003690:	b921      	cbnz	r1, 800369c <_realloc_r+0x14>
 8003692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003696:	4611      	mov	r1, r2
 8003698:	f7ff bf9c 	b.w	80035d4 <_malloc_r>
 800369c:	b922      	cbnz	r2, 80036a8 <_realloc_r+0x20>
 800369e:	f7ff ff49 	bl	8003534 <_free_r>
 80036a2:	4625      	mov	r5, r4
 80036a4:	4628      	mov	r0, r5
 80036a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a8:	f000 f830 	bl	800370c <_malloc_usable_size_r>
 80036ac:	42a0      	cmp	r0, r4
 80036ae:	d20f      	bcs.n	80036d0 <_realloc_r+0x48>
 80036b0:	4621      	mov	r1, r4
 80036b2:	4638      	mov	r0, r7
 80036b4:	f7ff ff8e 	bl	80035d4 <_malloc_r>
 80036b8:	4605      	mov	r5, r0
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d0f2      	beq.n	80036a4 <_realloc_r+0x1c>
 80036be:	4631      	mov	r1, r6
 80036c0:	4622      	mov	r2, r4
 80036c2:	f7ff ff0f 	bl	80034e4 <memcpy>
 80036c6:	4631      	mov	r1, r6
 80036c8:	4638      	mov	r0, r7
 80036ca:	f7ff ff33 	bl	8003534 <_free_r>
 80036ce:	e7e9      	b.n	80036a4 <_realloc_r+0x1c>
 80036d0:	4635      	mov	r5, r6
 80036d2:	e7e7      	b.n	80036a4 <_realloc_r+0x1c>

080036d4 <_sbrk_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4d06      	ldr	r5, [pc, #24]	; (80036f0 <_sbrk_r+0x1c>)
 80036d8:	2300      	movs	r3, #0
 80036da:	4604      	mov	r4, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	602b      	str	r3, [r5, #0]
 80036e0:	f7fd feb8 	bl	8001454 <_sbrk>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d102      	bne.n	80036ee <_sbrk_r+0x1a>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	b103      	cbz	r3, 80036ee <_sbrk_r+0x1a>
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	20000224 	.word	0x20000224

080036f4 <__malloc_lock>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__malloc_lock+0x8>)
 80036f6:	f000 b811 	b.w	800371c <__retarget_lock_acquire_recursive>
 80036fa:	bf00      	nop
 80036fc:	2000022c 	.word	0x2000022c

08003700 <__malloc_unlock>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__malloc_unlock+0x8>)
 8003702:	f000 b80c 	b.w	800371e <__retarget_lock_release_recursive>
 8003706:	bf00      	nop
 8003708:	2000022c 	.word	0x2000022c

0800370c <_malloc_usable_size_r>:
 800370c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003710:	1f18      	subs	r0, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	bfbc      	itt	lt
 8003716:	580b      	ldrlt	r3, [r1, r0]
 8003718:	18c0      	addlt	r0, r0, r3
 800371a:	4770      	bx	lr

0800371c <__retarget_lock_acquire_recursive>:
 800371c:	4770      	bx	lr

0800371e <__retarget_lock_release_recursive>:
 800371e:	4770      	bx	lr

08003720 <_init>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr

0800372c <_fini>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	bf00      	nop
 8003730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003732:	bc08      	pop	{r3}
 8003734:	469e      	mov	lr, r3
 8003736:	4770      	bx	lr
